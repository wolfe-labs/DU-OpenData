{
  "classes": {
    "Adjustor": {
      "parent": "Engine",
      "methods": {
        "activate": {
          "description": "Start the adjustor at full power (works only when run inside a piloting controller)",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Stops the adjustor (works only when run inside a piloting controller)",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Checks if the adjustor is active",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True when the adjustor is on, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "Adjustor.getState() is deprecated, use Adjustor.isActive().",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the state of the adjustor",
          "isMethodStatic": true
        },
        "setThrust": {
          "description": "Set the exhaust thrust of the adjustor",
          "params": [
            {
              "name": "thrust",
              "type": "number",
              "description": "The adjustor thrust in newtons (limited by the maximum thrust)"
            }
          ],
          "isMethodStatic": true
        },
        "getThrust": {
          "description": "Returns the current exhaust thrust of the adjustor",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current exhaust thrust of the adjustor in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxThrust": {
          "description": "Returns the maximal exhaust thrust the adjustor can deliver",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximum exhaust thrust of the adjustor in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxThrustBase": {
          "deprecated": true,
          "description": "Adjustor.getMaxThrustBase() is deprecated, use Adjustor.getMaxThrust().",
          "isMethodStatic": true
        },
        "getThrustAxis": {
          "description": "Returns the adjustor exhaust thrust direction in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The adjustor exhaust thrust direction vector in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getTorqueAxis": {
          "description": "Returns the adjustor torque axis in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The torque axis vector in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldThrustAxis": {
          "description": "Returns the adjustor exhaust thrust direction in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The adjustor thrust direction vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "thrustAxis": {
          "deprecated": true,
          "description": "Adjustor.thrustAxis() is deprecated, use Adjustor.getWorldThrustAxis().",
          "isMethodStatic": true
        },
        "getWorldTorqueAxis": {
          "description": "Returns the adjustor torque axis in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The torque axis vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "torqueAxis": {
          "deprecated": true,
          "description": "Adjustor.torqueAxis() is deprecated, use Adjustor.getWorldTorqueAxis().",
          "isMethodStatic": true
        },
        "isOutOfFuel": {
          "deprecated": true,
          "description": "Adjustor.isOutOfFuel() is deprecated.",
          "isMethodStatic": true
        },
        "hasFunctionalFuelTank": {
          "deprecated": true,
          "description": "Adjustor.hasFunctionalFuelTank() is deprecated.",
          "isMethodStatic": true
        },
        "getCurrentFuelRate": {
          "deprecated": true,
          "description": "Adjustor.getCurrentFuelRate()",
          "isMethodStatic": true
        },
        "getFuelRateEfficiency": {
          "deprecated": true,
          "description": "Adjustor.getFuelRateEfficiency()",
          "isMethodStatic": true
        },
        "getFuelConsumption": {
          "deprecated": true,
          "description": "Adjustor.getFuelConsumption()",
          "isMethodStatic": true
        },
        "getDistance": {
          "deprecated": true,
          "description": "Adjustor.getDistance()",
          "isMethodStatic": true
        },
        "getT50": {
          "deprecated": true,
          "description": "Adjustor.getT50() is deprecated.",
          "isMethodStatic": true
        }
      }
    },
    "Airbrake": {
      "parent": "BrakeEngine"
    },
    "Airfoil": {
      "parent": "Engine",
      "methods": {
        "getLift": {
          "description": "Returns the current lift of the airfoil",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current lift of the airfoil in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getThrust": {
          "deprecated": true,
          "description": "Airfoil.getThrust() is deprecated, use Airfoil.getLift().",
          "isMethodStatic": true
        },
        "getMaxLift": {
          "description": "Gives the maximum lift that the airfoil can generate, under optimal conditions.\nNote that the actual maximum lift will most of the time be less than this value",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximum lift of the airfoil in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxThrustBase": {
          "deprecated": true,
          "description": "Airfoil.getMaxThrustBase() is deprecated, use Airfoil.getMaxLift().",
          "isMethodStatic": true
        },
        "getDrag": {
          "description": "Returns the current drag of the airfoil",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current drag of the airfoil in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getDragRatio": {
          "description": "The ratio between lift and drag, depending of the aerodynamic profile of the airfoil",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The ratio between lift and drag"
            }
          ],
          "isMethodStatic": true
        },
        "getCurrentMinLift": {
          "description": "Returns the minimal lift the airfoil can deliver at the moment (can be higher than zero),\nwhich will depend on various conditions like atmospheric density, obstruction, orientation, etc",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current minimal airfoil lift in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getMinThrust": {
          "deprecated": true,
          "description": "Airfoil.getMinThrust() is deprecated, use Airfoil.getCurrentMinLift().",
          "isMethodStatic": true
        },
        "getCurrentMaxLift": {
          "description": "Returns the maximal lift the aifoil can deliver at the moment, which might depend on\nvarious conditions like atmospheric density, obstruction, orientation, etc. The actual lift will be\nanything below this maximum lift, which defines the current max capability of the airfoil",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current maximal airfoil lift in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxThrust": {
          "deprecated": true,
          "description": "Airfoil.getMaxThrust() is deprecated, use Airfoil.getCurrentMaxLift().",
          "isMethodStatic": true
        },
        "getMaxLiftEfficiency": {
          "description": "Returns the ratio between the current maximum lift and the optimal maximum lift",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Usually 1 but can be lower for certain airfoils"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxThrustEfficiency": {
          "deprecated": true,
          "description": "Airfoil.getMaxThrustEfficiency() is deprecated, use Airfoil.getMaxLiftEfficiency().",
          "isMethodStatic": true
        },
        "getLiftAxis": {
          "description": "Returns the airfoil lift direction in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The airfoil lift direction vector in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getTorqueAxis": {
          "description": "Returns the airfoil torque axis in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The airfoil torque axis vector in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldLiftAxis": {
          "description": "Returns the airfoil lift direction in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The airfoil lift direction vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "thrustAxis": {
          "deprecated": true,
          "description": "Airfoil.thrustAxis() is deprecated, use Airfoil.getWorldLiftAxis().",
          "isMethodStatic": true
        },
        "getWorldTorqueAxis": {
          "description": "Returns the adjustor torque axis in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The airfoil torque axis vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "torqueAxis": {
          "deprecated": true,
          "description": "Airfoil.torqueAxis() is deprecated, use Airfoil.getWorldTorqueAxis().",
          "isMethodStatic": true
        },
        "isStalled": {
          "description": "Checks if the airfoil is stalled",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the airfoil is stalled, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getStallAngle": {
          "description": "Returns the airfoil stall angle",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The stall angle of the airfoil in degrees"
            }
          ],
          "isMethodStatic": true
        },
        "getMinAngle": {
          "description": "Returns the minimum angle to produce the maximum lift of the airfoil\nNote that the airfoil will produce lift at a lower angle but not optimally",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The minimum angle of the airfoil in degrees"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxAngle": {
          "description": "Returns the maximum angle to produce the maximum lift of the airfoil\nNote that the airfoil will produce lift at a higher angle but not optimally",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximum angle of the airfoil in degrees"
            }
          ],
          "isMethodStatic": true
        },
        "activate": {
          "deprecated": true,
          "description": "Airfoil.activate() is deprecated.",
          "isMethodStatic": true
        },
        "deactivate": {
          "deprecated": true,
          "description": "Airfoil.deactivate() is deprecated.",
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "Airfoil.getState() is deprecated.",
          "isMethodStatic": true
        },
        "toggle": {
          "deprecated": true,
          "description": "Airfoil.toggle() is deprecated.",
          "isMethodStatic": true
        },
        "setThrust": {
          "deprecated": true,
          "description": "Airfoil.setThrust(thrust) is deprecated.",
          "isMethodStatic": true
        },
        "isOutOfFuel": {
          "deprecated": true,
          "description": "Airfoil.isOutOfFuel() is deprecated.",
          "isMethodStatic": true
        },
        "hasFunctionalFuelTank": {
          "deprecated": true,
          "description": "Airfoil.hasFunctionalFuelTank() is deprecated.",
          "isMethodStatic": true
        },
        "getCurrentFuelRate": {
          "deprecated": true,
          "description": "Airfoil.getCurrentFuelRate() is deprecated.",
          "isMethodStatic": true
        },
        "getFuelRateEfficiency": {
          "deprecated": true,
          "description": "Airfoil.getFuelRateEfficiency() is deprecated.",
          "isMethodStatic": true
        },
        "getFuelConsumption": {
          "deprecated": true,
          "description": "Airfoil.getFuelConsumption() is deprecated.",
          "isMethodStatic": true
        },
        "getDistance": {
          "deprecated": true,
          "description": "Airfoil.getDistance() is deprecated.",
          "isMethodStatic": true
        },
        "getT50": {
          "deprecated": true,
          "description": "Airfoil.getT50() is deprecated.",
          "isMethodStatic": true
        }
      }
    },
    "AntiGravityGenerator": {
      "parent": "Element",
      "methods": {
        "activate": {
          "description": "Activate the anti-gravity generator",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Deactivate the anti-gravity generator",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Returns the state of activation of the anti-gravity generator",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the anti-gravity generator is started, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "AntiGravityGenerator.getState() is deprecated, use AntiGravityGenerator.isActive() instead.",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the anti-gravity generator",
          "isMethodStatic": true
        },
        "getFieldStrength": {
          "description": "Returns the strength of the anti-gravitational field",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The power of the anti-gravitational field in Es"
            }
          ],
          "isMethodStatic": true
        },
        "getCompensationRate": {
          "description": "Returns the current rate of compensation of the gravitational field",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current rate in percentage"
            }
          ],
          "isMethodStatic": true
        },
        "getFieldPower": {
          "description": "Returns the current power of the gravitational field",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current power in percentage"
            }
          ],
          "isMethodStatic": true
        },
        "getPulsorCount": {
          "description": "Returns the number of pulsors linked to the anti-gravity generator",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The number of pulsors linked"
            }
          ],
          "isMethodStatic": true
        },
        "setTargetAltitude": {
          "description": "Set the target altitude for the anti-gravity field. Cannot be called from onFlush",
          "params": [
            {
              "name": "altitude",
              "type": "number",
              "description": "The target altitude in meters. It will be reached with a slow acceleration (not instantaneous)"
            }
          ],
          "isMethodStatic": true
        },
        "setBaseAltitude": {
          "deprecated": true,
          "description": "AntiGravityGenerator.setBaseAltitude(altitude) is deprecated, use AntiGravityGenerator.setTargetAltitude(altitude) instead.",
          "isMethodStatic": true
        },
        "getTargetAltitude": {
          "description": "Returns the target altitude defined for the anti-gravitational field",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The target altitude in meters"
            }
          ],
          "isMethodStatic": true
        },
        "getBaseAltitude": {
          "description": "Returns the current base altitude of the anti-gravitational field",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current base altitude in meters"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "AtmosphericEngine": {
      "parent": "FueledEngine",
      "methods": {
        "getDistance": {
          "deprecated": true,
          "description": "AtmosphericEngine.getDistance() is deprecated.",
          "isMethodStatic": true
        }
      }
    },
    "BaseShieldGenerator": {
      "parent": "Element",
      "events": {
        "onToggled": {
          "description": "Emitted when we started or stopped the shield generator",
          "params": [
            {
              "name": "active",
              "type": "boolean",
              "description": "True if the element was activated, false otherwise"
            }
          ]
        },
        "toggled": {},
        "onAbsorbed": {
          "description": "Emitted when the shield absorbed incoming damage",
          "params": [
            {
              "name": "hitpoints",
              "type": "number",
              "description": "Damage the shield absorbed"
            },
            {
              "name": "rawHitpoints",
              "type": "number",
              "description": "Total damage without taking resistances into account"
            }
          ]
        },
        "absorbed": {},
        "onDown": {
          "description": "Emitted when the shield hit points reached 0 due to damage"
        },
        "down": {},
        "onRestored": {
          "description": "Emitted when the shield hit points were fully restored"
        },
        "restored": {},
        "onEnterLockdown": {
          "description": "Emitted when the shield enters lockdown"
        },
        "enterLockdown": {},
        "onLeaveLockdown": {
          "description": "Emitted when the shield exits the lockdown"
        },
        "leaveLockdown": {}
      },
      "methods": {
        "activate": {
          "description": "Activate the shield",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Deactivate the shield",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the state of the shield",
          "isMethodStatic": true
        },
        "getState": {
          "description": "Returns the activation state of the shield",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "True when the shield is active, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getShieldHitpoints": {
          "description": "Returns the current hitpoints of the shield",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current hitpoints of the shield"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxShieldHitpoints": {
          "description": "Returns the maximal hitpoints of the shield",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximal hitpoints of the shield"
            }
          ],
          "isMethodStatic": true
        },
        "getResistances": {
          "description": "Returns distribution of resistance pool over resistance types",
          "returns": [
            {
              "type": "table",
              "name": "resistances",
              "description": "Resistance to damage type {antimatter, electromagnetic, kinetic, thermic}"
            }
          ],
          "isMethodStatic": true
        },
        "setResistances": {
          "description": "Distribute the resistance pool according to damage type",
          "params": [
            {
              "name": "antimatter",
              "type": "number",
              "description": "Antimatter damage resistance"
            },
            {
              "name": "electromagnetic",
              "type": "number",
              "description": "Electromagnetic damage resistance"
            },
            {
              "name": "kinetic",
              "type": "number",
              "description": "Kinetic damage resistance"
            },
            {
              "name": "thermic",
              "type": "number",
              "description": "Thermic damage resistance"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if resistance was distributed, false if an error occurred"
            }
          ],
          "isMethodStatic": true
        },
        "getResistancesCooldown": {
          "description": "Returns time after which adjusting resistances is possible again",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Remaining seconds of the resistance cooldown"
            }
          ],
          "isMethodStatic": true
        },
        "getResistancesMaxCooldown": {
          "description": "Returns maximal cooldown between adjusting resistances",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Maximal seconds of the resistance cooldown"
            }
          ],
          "isMethodStatic": true
        },
        "getResistancesPool": {
          "description": "Returns total resistance pool that may be distributed",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Total pool of resistances"
            }
          ],
          "isMethodStatic": true
        },
        "getResistancesRemaining": {
          "description": "Returns the remaining amount of the resistance pool that can be distributed",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Remaining resistance pool"
            }
          ],
          "isMethodStatic": true
        },
        "getStressRatio": {
          "description": "Returns ratio per damage type of recent weapon impacts after applying resistance",
          "returns": [
            {
              "type": "table",
              "name": "stress",
              "description": "Stress ratio due to damage type {antimatter, electromagnetic, kinetic, thermic}"
            }
          ],
          "isMethodStatic": true
        },
        "getStressRatioRaw": {
          "description": "Returns ratio per damage type of recent weapon impacts without resistance",
          "returns": [
            {
              "type": "table",
              "name": "stress",
              "description": "Stress ratio due to damage type {antimatter, electromagnetic, kinetic, thermic}"
            }
          ],
          "isMethodStatic": true
        },
        "getStressHitpoints": {
          "description": "Returns stress, that is the total hitpoints of recent weapon impacts after applying resistance",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Total stress hitpoints due to recent weapon impacts"
            }
          ],
          "isMethodStatic": true
        },
        "getStressHitpointsRaw": {
          "description": "Returns stress, that is the total hitpoints of recent weapon impacts without resistance",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Total stress hitpoints due to recent weapon impacts"
            }
          ],
          "isMethodStatic": true
        },
        "inLockdown": {
          "description": "Returns whether the base shield is currently in lockdown",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the base shield is in lockdown, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getLockdownRemaining": {
          "description": "Returns the remaining time of the base shield lockdown",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Remaining lockdown time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getLockdownExitTime": {
          "description": "Returns the hour since midnight of the preferred lockdown exit",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "Preferred lockdown exit hour UTC"
            }
          ],
          "isMethodStatic": true
        },
        "setLockdownExitTime": {
          "description": "Set hour since midnight for the preferred lockdown exit",
          "params": [
            {
              "name": "hour",
              "type": "integer",
              "description": "Preferred lockdown exit hour UTC (0-23)"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if lockdown exit was set, false if an error occurred"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "BrakeEngine": {
      "parent": "Engine",
      "methods": {
        "activate": {
          "description": "Start the brake at full power (works only when run inside a cockpit or under remote control)",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Stops the brake (works only when run inside a cockpit or under remote control)",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Checks if the brake is active",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the brake is on, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "BrakeEngine.getState() is deprecated, use BrakeEngine.isActive().",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the state of the brake",
          "isMethodStatic": true
        },
        "setThrust": {
          "description": "Set the thrust of the brake. Note that brakes can generate a force only in the movement opposite direction",
          "params": [
            {
              "name": "thrust",
              "type": "number",
              "description": "The brake thrust in newtons (limited by the maximum thrust)"
            }
          ],
          "isMethodStatic": true
        },
        "getThrust": {
          "description": "Returns the current thrust of the brake",
          "returns": [
            {
              "type": "number",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getMaxThrust": {
          "deprecated": true,
          "description": "BrakeEngine.getMaxThrust() is deprecated, use BrakeEngine.getCurrentMaxThrust().\n@diagnostic disable-next-line",
          "isMethodStatic": true
        },
        "getMaxThrustBase": {
          "deprecated": true,
          "description": "BrakeEngine.getMaxThrustBase() is deprecated, use BrakeEngine.getMaxThrust().",
          "isMethodStatic": true
        },
        "getCurrentMinThrust": {
          "description": "Returns the minimal thrust the brake can deliver at the moment (can be more than zero),\nwhich will depend on various conditions like atmospheric density, obstruction, orientation, etc\nMost of the time, this will be 0 but it can be greater than 0, particularly for Ailerons, in which case\nthe actual thrust will be at least equal to minThrust",
          "returns": [
            {
              "type": "number",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getMinThrust": {
          "deprecated": true,
          "description": "BrakeEngine.getMinThrust() is deprecated, use BrakeEngine.getCurrentMinThrust().",
          "isMethodStatic": true
        },
        "getCurrentMaxThrust": {
          "description": "Returns the maximal thrust the brake can deliver at the moment, which might depend on\nvarious conditions like atmospheric density, obstruction, orientation, etc. The actual thrust will be\nanything below this maxThrust, which defines the current max capability of the brake",
          "returns": [
            {
              "type": "number",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getMaxThrustEfficiency": {
          "description": "Returns the ratio between the current maximum thrust and the optimal maximum thrust",
          "returns": [
            {
              "type": "number",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getThrustAxis": {
          "description": "Returns the brake thrust direction in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getWorldThrustAxis": {
          "description": "Returns the brake thrust direction in world coordinates",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "thrustAxis": {
          "deprecated": true,
          "description": "BrakeEngine.thrustAxis() is deprecated, use BrakeEngine.getWorldThrustAxis().",
          "isMethodStatic": true
        },
        "isOutOfFuel": {
          "deprecated": true,
          "description": "BrakeEngine.isOutOfFuel() is deprecated.",
          "isMethodStatic": true
        },
        "hasFunctionalFuelTank": {
          "deprecated": true,
          "description": "BrakeEngine.hasFunctionalFuelTank() is deprecated.",
          "isMethodStatic": true
        },
        "getCurrentFuelRate": {
          "deprecated": true,
          "description": "BrakeEngine.getCurrentFuelRate() is deprecated.",
          "isMethodStatic": true
        },
        "getFuelRateEfficiency": {
          "deprecated": true,
          "description": "BrakeEngine.getFuelRateEfficiency() is deprecated.",
          "isMethodStatic": true
        },
        "getFuelConsumption": {
          "deprecated": true,
          "description": "BrakeEngine.getFuelConsumption() is deprecated.",
          "isMethodStatic": true
        },
        "getDistance": {
          "deprecated": true,
          "description": "BrakeEngine.getDistance() is deprecated.",
          "isMethodStatic": true
        },
        "getT50": {
          "deprecated": true,
          "description": "BrakeEngine.getT50() is deprecated.",
          "isMethodStatic": true
        },
        "torqueAxis": {
          "deprecated": true,
          "description": "BrakeEngine.torqueAxis() is deprecated.",
          "isMethodStatic": true
        }
      }
    },
    "Construct": {
      "methods": {
        "getName": {
          "description": "Returns the name of the construct",
          "returns": [
            {
              "type": "string",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getId": {
          "description": "Returns the construct unique ID",
          "returns": [
            {
              "type": "integer",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getOwner": {
          "description": "Returns the owner entity",
          "returns": [
            {
              "type": "table",
              "name": "entity",
              "description": "The owner entity table with fields {[int] id, [bool] isOrganization} describing the owner. Use system.getPlayerName(id) and system.getOrganization(id) to retrieve info about it"
            }
          ],
          "isMethodStatic": true
        },
        "getCreator": {
          "description": "Returns the creator entity",
          "returns": [
            {
              "type": "integer",
              "name": "entity",
              "description": "The owner entity table with fields {[int] id, [bool] isOrganization} describing the owner. Use system.getPlayerName(id) and system.getOrganization(id) to retrieve info about it"
            }
          ],
          "isMethodStatic": true
        },
        "getSchematicContainerId": {
          "description": "Returns the local id of the current active schematic container. nil if none has been declared",
          "returns": [
            {
              "type": "interger",
              "name": "the",
              "description": "local id of the current active schematic container"
            }
          ],
          "isMethodStatic": true
        },
        "isWarping": {
          "description": "Checks if the construct is currently warping",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the construct is currently warping, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getWarpState": {
          "description": "Returns the current warp state",
          "returns": [
            {
              "type": "integer",
              "name": "state",
              "description": "The current warp state index (Idle = 1, Engage = 2, Align = 3, Spool = 4, Accelerate = 5, Cruise = 6, Decelerate = 7, Stopping = 8, Disengage = 9)"
            }
          ],
          "isMethodStatic": true
        },
        "isInPvPZone": {
          "description": "Checks if the construct is in PvP zone",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the construct is in PVP zone, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getDistanceToSafeZone": {
          "description": "Returns the distance between the construct and the nearest safe zone",
          "returns": [
            {
              "type": "number",
              "name": "distance",
              "description": "The distance to the nearest safe zone border in meters. Positive value if the construct is outside of any safe zone"
            }
          ],
          "isMethodStatic": true
        },
        "getPvPTimer": {
          "description": "Returns the current construct PvP timer state",
          "returns": [
            {
              "type": "number",
              "name": "time",
              "description": "The remaining time of the PvP timer, or 0.0 if elapsed"
            }
          ],
          "isMethodStatic": true
        },
        "getMass": {
          "description": "Returns the mass of the construct",
          "returns": [
            {
              "type": "number",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getTotalMass": {
          "description": "Returns the total mass of the construct (voxels, elements, avatars and docked constructs)",
          "returns": [
            {
              "type": "number",
              "name": "The",
              "description": "total mass of the construct in kilograms"
            }
          ],
          "isMethodStatic": true
        },
        "getInertialMass": {
          "description": "Returns the inertial mass of the construct, calculated as 1/3 of the trace of the inertial tensor",
          "returns": [
            {
              "type": "number",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getInertialTensor": {
          "description": "Returns the inertial tensor of the construct",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getCenterOfMass": {
          "description": "Returns the position of the center of mass of the construct, in local construct coordinates",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getWorldCenterOfMass": {
          "description": "Returns the position of the center of mass of the construct, in world coordinates",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getCrossSection": {
          "description": "Returns the construct's cross sectional surface in the current direction of movement",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The construct's surface exposed in the current direction of movement in meters square"
            }
          ],
          "isMethodStatic": true
        },
        "getSize": {
          "description": "Returns the size of the building zone of the construct",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getBoundingBoxSize": {
          "description": "Returns the size of the bounding box of the construct",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getBoundingBoxCenter": {
          "description": "Returns the position of the center of bounding box of the construct in local construct coordinates",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getMaxSpeed": {
          "description": "Returns the max speed along current moving direction",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The max speed along current moving direction in m/s"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxAngularSpeed": {
          "description": "Returns the max angular speed",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The max angular speed in rad/s"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxSpeedPerAxis": {
          "description": "Returns the max speed per axis",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The max speed along axes {x, -x, y, -y, z, -z} in m/s"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxThrustAlongAxis": {
          "description": "Returns the construct max kinematics parameters in both atmo and space range, in newtons. Kinematics\nparameters designate here the maximal positive and negative base force the construct is capable of producing along the chosen\nAxisvector, as defined by the Core Unit or the gyro unit, if active. In practice, this gives you an estimate of the maximum\nthrust your ship is capable of producing in space or in atmosphere, as well as the max reverse thrust. These are theoretical\nestimates and correspond with the addition of the maxThrustBase along the corresponding axis. It might not reflect the\naccurate current max thrust capacity of your ship, which depends on various local conditions (atmospheric density,\norientation, obstruction, engine damage, etc)\nThis is typically used in conjunction with the Control Unit throttle to setup the desired forward acceleration",
          "params": [
            {
              "name": "taglist",
              "type": "string",
              "description": "Comma (for union) or space (for intersection) separated list of tags. You can set tags directly on the engines in the right-click menu"
            },
            {
              "name": "CRefAxis",
              "type": "table",
              "description": "Axis along which to compute the max force (in construct reference)"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The kinematics parameters in Newtons in the order: atmoRange.FMaxPlus, atmoRange.FMaxMinus, spaceRange.FMaxPlus, spaceRange.FMaxMinus"
            }
          ],
          "isMethodStatic": true
        },
        "getCurrentBrake": {
          "description": "Returns the current braking force generated by construct brakes",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current braking force in Newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxBrake": {
          "description": "Returns the maximum braking force that can currently be generated by the construct brakes",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximum braking force in Newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldPosition": {
          "description": "Returns the world position of the construct",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The xyz world coordinates of the construct center position in meters"
            }
          ],
          "isMethodStatic": true
        },
        "getVelocity": {
          "description": "The construct's linear velocity, relative to its parent, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Relative linear velocity vector, in construct local coordinates in m/s"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldVelocity": {
          "description": "The construct's linear velocity, relative to its parent, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Relative linear velocity vector, in world coordinates in m/s"
            }
          ],
          "isMethodStatic": true
        },
        "getAbsoluteVelocity": {
          "description": "The construct's absolute linear velocity, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Absolute linear velocity vector, in construct local coordinates in m/s"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldAbsoluteVelocity": {
          "description": "The construct's absolute linear velocity, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Absolute linear velocity vector, in world coordinates in m/s"
            }
          ],
          "isMethodStatic": true
        },
        "getAcceleration": {
          "description": "The construct's linear acceleration, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Linear acceleration vector, in construct local coordinates in m/s2"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldAcceleration": {
          "description": "The construct's linear acceleration, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Linear acceleration vector, in world coordinates in m/s2"
            }
          ],
          "isMethodStatic": true
        },
        "getAngularVelocity": {
          "description": "The construct's angular velocity, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Angular velocity vector, in construct local coordinates in rad/s"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldAngularVelocity": {
          "description": "The construct's angular velocity, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Angular velocity vector, in world coordinates in rad/s"
            }
          ],
          "isMethodStatic": true
        },
        "getAngularAcceleration": {
          "description": "The construct's angular acceleration, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Angular acceleration vector, in construct local coordinates in rad/s2"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldAngularAcceleration": {
          "description": "The construct's angular acceleration, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Angular acceleration vector, in world coordinates in rad/s2"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldAirFrictionAcceleration": {
          "description": "Returns the acceleration generated by air resistance",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The xyz world acceleration generated by air resistance"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldAirFrictionAngularAcceleration": {
          "description": "Returns the acceleration torque generated by air resistance",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The xyz world acceleration torque generated by air resistance"
            }
          ],
          "isMethodStatic": true
        },
        "getFrictionBurnSpeed": {
          "description": "Returns the speed at which your construct will suffer damage due to friction with the air",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The construct speed to get damages due to friction in m/s"
            }
          ],
          "isMethodStatic": true
        },
        "getForward": {
          "description": "Returns the forward vector of the construct coordinates system",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The forward vector of the construct coordinates system. It's a static value equal to (0,1,0)"
            }
          ],
          "isMethodStatic": true
        },
        "getRight": {
          "description": "Returns the right vector of the construct coordinates system",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The right vector of the construct coordinates system. It's a static value equal to (1,0,0)"
            }
          ],
          "isMethodStatic": true
        },
        "getUp": {
          "description": "Returns the up direction vector of the construct coordinates system",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The up vector of the construct coordinates system.. It's a static value equal to (0,0,1)"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldForward": {
          "description": "Returns the forward direction vector of the construct, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The forward direction vector of the construct, in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldRight": {
          "description": "Returns the right direction vector of the construct, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The right direction vector of the construct, in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldUp": {
          "description": "Returns the up direction vector of the construct, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The up direction vector of the construct, in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getOrientationUnitId": {
          "description": "Returns the local id of the current active orientation unit (core unit or gyro unit)",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "local id of the current active orientation unit (core unit or gyro unit)"
            }
          ],
          "isMethodStatic": true
        },
        "getOrientationForward": {
          "description": "Returns the forward direction vector of the active orientation unit, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Forward direction vector of the active orientation unit, in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getOrientationRight": {
          "description": "Returns the right direction vector of the active orientation unit, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Right direction vector of the active orientation unit, in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getOrientationUp": {
          "description": "Returns the up direction vector of the active orientation unit, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Up direction vector of the active orientation unit, in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldOrientationForward": {
          "description": "Returns the forward direction vector of the active orientation unit, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Forward direction vector of the active orientation unit, in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldOrientationRight": {
          "description": "Returns the right direction vector of the active orientation unit, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Right direction vector of the active orientation unit, in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldOrientationUp": {
          "description": "Returns the up direction vector of the active orientation unit, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Up direction vector of the active orientation unit, in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getParent": {
          "description": "Returns the id of the parent construct of our active construct",
          "returns": [
            {
              "type": "integer",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getClosestParent": {
          "description": "Returns the id of the nearest constructs, on which the construct can dock",
          "returns": [
            {
              "type": "integer",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getCloseParents": {
          "description": "Returns the list of ids of nearby constructs, on which the construct can dock",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getParentPosition": {
          "description": "Returns the position of the construct's parent when docked in local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The position of the construct's parent in local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getParentWorldPosition": {
          "description": "Returns the position of the construct's parent when docked in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The position of the construct's parent in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getParentForward": {
          "description": "Returns the construct's parent forward direction vector, in local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The construct's parent forward direction vector, in local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getParentRight": {
          "description": "Returns the construct's parent right direction vector, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The construct's parent right direction vector, in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getParentUp": {
          "description": "Returns the construct's parent up direction vector, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The construct's parent up direction vector, in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getParentWorldForward": {
          "description": "Returns the construct's parent forward direction vector, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The construct's parent forward direction vector, in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getParentWorldRight": {
          "description": "Returns the construct's parent right direction vector, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The construct's parent right direction vector, in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getParentWorldUp": {
          "description": "Returns the construct's parent up direction vector, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The construct's parent up direction vector, in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getPlayersOnBoard": {
          "description": "Returns the list of player IDs on board the construct",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getPlayersOnBoardInVRStation": {
          "description": "Returns the list of player ids on board the construct inside a VR Station",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "isPlayerBoarded": {
          "description": "Checks if the given player is on board in the construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The player id"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the given player is on board, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isPlayerBoardedInVRStation": {
          "description": "Returns 1 if the given player is boarded to the construct inside a VR Station",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The player id"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the given player is boarded to the construct, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getBoardedPlayerMass": {
          "description": "Returns the mass of the given player or surrogate if it is on board the construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The player id"
            }
          ],
          "returns": [
            {
              "type": "number",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getBoardedInVRStationAvatarMass": {
          "description": "Returns the mass of the given player if in VR station on board the construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The player id"
            }
          ],
          "returns": [
            {
              "type": "number",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getDockedConstructs": {
          "description": "Returns the list of IDs of constructs docked to the construct",
          "returns": [
            {
              "type": "table",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "isConstructDocked": {
          "description": "Checks if the given construct is docked to the construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The construct id"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the given construct is docked, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getDockedConstructMass": {
          "description": "Returns the mass of the given construct if it is docked to the construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The construct id"
            }
          ],
          "returns": [
            {
              "type": "number",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "setDockingMode": {
          "description": "Sets the docking mode",
          "params": [
            {
              "name": "mode",
              "type": "integer",
              "description": "The docking mode (Manual = 1, Automatic = 2, Semi-automatic = 3)"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the operation is a success, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getDockingMode": {
          "description": "Returns the current docking mode",
          "returns": [
            {
              "type": "integer",
              "name": "mode",
              "description": "The docking mode (Manual = 1, Automatic = 2, Semi-automatic = 3)"
            }
          ],
          "isMethodStatic": true
        },
        "dock": {
          "description": "Sends a request to dock to the given construct. Limited to piloting controllers",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The parent construct id"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the operation is a success, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "undock": {
          "description": "Sends a request to undock the construct. Limited to piloting controllers",
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the operation is a success, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "forceDeboard": {
          "description": "Sends a request to deboard a player or surrogate with the given id",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The player id"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "True",
              "description": "if the operation is a success, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "forceUndock": {
          "description": "Sends a request to undock a construct with the given id",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The construct id"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "True",
              "description": "if the operation is a success, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "forceInterruptVRSession": {
          "description": "Sends a request to interrupt the surrogate session of a player with the given id",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The player id"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "True",
              "description": "if the operation is a success, false otherwise"
            }
          ],
          "isMethodStatic": true
        }
      },
      "events": {
        "onDocked": {
          "description": "Emitted when the construct becomes docked",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The parent id"
            }
          ]
        },
        "onUndocked": {
          "description": "Emitted when the construct is undocked",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The previous parent id"
            }
          ]
        },
        "onPlayerBoarded": {
          "description": "Emitted when a player or surrogate boards the construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The id of the boarding player"
            }
          ]
        },
        "onVRStationEntered": {
          "description": "Emitted when a player enters a VR Station",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The id of the boarding player"
            }
          ]
        },
        "onConstructDocked": {
          "description": "Emitted when another construct docks this construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The id of the docking construct"
            }
          ]
        },
        "onPvPTimer": {
          "description": "Emitted when the PvP timer started or elapsed",
          "params": [
            {
              "name": "active",
              "type": "boolean",
              "description": "True if the timer started, false when the timer elapsed"
            }
          ]
        }
      }
    },
    "Container": {
      "parent": "Element",
      "methods": {
        "getSelfMass": {
          "description": "Returns the mass of the container element(as if it were empty).",
          "returns": [
            {
              "type": "number",
              "name": "valeu",
              "description": "The mass of the container in kilograms"
            }
          ],
          "isMethodStatic": true
        },
        "getItemsMass": {
          "description": "Returns the container content mass(the sum of the mass of all items it contains).",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The total mass of the contents of the container, excluding the container's own mass, in kilograms"
            }
          ],
          "isMethodStatic": true
        },
        "getItemsVolume": {
          "description": "Returns the container content volume(the sum of the volume of all items it contains).",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The total volume of the contents of the container in liters"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxVolume": {
          "description": "Returns the maximum volume of the container.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximum volume of the container in liters"
            }
          ],
          "isMethodStatic": true
        },
        "getContent": {
          "description": "Returns a table describing the contents of the container, as a pair itemId and quantity per slot.",
          "returns": [
            {
              "type": "table",
              "name": "content",
              "description": "The content of the container as a table with fields {[int] id, [float] quantity} per slot"
            }
          ],
          "isMethodStatic": true
        },
        "getItemsList": {
          "deprecated": true,
          "description": "Container.getItemsList() is deprecated, use Container.getContent() instead.",
          "isMethodStatic": true
        },
        "updateContent": {
          "description": "Send a request to get an update of the content of the container, limited to one call allowed per 30 seconds.\nThe onContentUpdate event is emitted by the container when the content is updated.",
          "returns": [
            {
              "type": "number",
              "name": "time",
              "description": "If the request is not yet possible, returns the remaining time to wait for."
            }
          ],
          "isMethodStatic": true
        },
        "acquireStorage": {
          "deprecated": true,
          "description": "Container.acquireStorage() is deprecated, use Container.updateContent() instead.",
          "isMethodStatic": true
        }
      },
      "events": {
        "onContentUpdate": {
          "description": "Emitted when the container content is updated(storage update or after a manual request made with updateContent())"
        },
        "storageAcquired": {}
      }
    },
    "ControlUnit": {
      "parent": "Element",
      "methods": {
        "exit": {
          "description": "Stops the Control Unit's Lua code and exits. Warning: calling this might cause your ship to fall from the sky,\nuse it with care. It is typically used in the coding of emergency Control Unit scripts to stop control once the ECU\nthinks that the ship has safely landed.",
          "isMethodStatic": true
        },
        "getMasterPlayerId": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerId() is deprecated, use player.getId() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerOrgIds": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerOrgIds() is deprecated, use player.getOrgIds() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerPosition": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerPosition() is deprecated, use player.getPosition() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerWorldPosition": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerWorldPosition() is deprecated, use player.getWorldPosition() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerForward": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerForward() is deprecated, use player.getForward() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerUp": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerUp() is deprecated, use player.getUp() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerRight": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerRight() is deprecated, use player.getRight() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerWorldForward": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerWorldForward() is deprecated, use player.getWorldForward() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerWorldUp": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerWorldUp() is deprecated, use player.getWorldUp() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerWorldRight": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerWorldRight() is deprecated, use player.getWorldRight() instead.",
          "isMethodStatic": true
        },
        "isMasterPlayerSeated": {
          "deprecated": true,
          "description": "ControlUnit.isMasterPlayerSeated() is deprecated, use player.isSeated() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerSeatId": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerSeatId() is deprecated, use player.getSeatId() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerParent": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerParent() is deprecated, use player.getParent() instead.",
          "isMethodStatic": true
        },
        "getMasterPlayerMass": {
          "deprecated": true,
          "description": "ControlUnit.getMasterPlayerMass() is deprecated, use player.getMass() instead.",
          "isMethodStatic": true
        },
        "setTimer": {
          "description": "Set up a timer with a given tag in a given period. This will start to trigger the 'onTimer' event with\nthe corresponding tag as an argument, to help you identify what is ticking, and when.",
          "params": [
            {
              "name": "tag",
              "type": "string",
              "description": "The tag of the timer, as a string, which will be used in the 'onTimer' event to identify this particular timer"
            },
            {
              "name": "period",
              "type": "number",
              "description": "The period of the timer, in seconds. The time resolution is limited by the framerate here, so you cannot set arbitrarily fast timers"
            }
          ],
          "isMethodStatic": true
        },
        "stopTimer": {
          "description": "Stop the timer with the given tag",
          "params": [
            {
              "name": "tag",
              "type": "string",
              "description": "The tag of the timer to stop, as a string"
            }
          ],
          "isMethodStatic": true
        },
        "getAtmosphereDensity": {
          "description": "Returns the ambient atmospheric density",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The atmospheric density(between 0 and 1)"
            }
          ],
          "isMethodStatic": true
        },
        "getClosestPlanetInfluence": {
          "description": "Returns the influence rate of the nearest planet",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The planet influence rate(between 0 and 1)"
            }
          ],
          "isMethodStatic": true
        },
        "hasDRM": {
          "description": "Checks if the control unit is protected by DRM",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the control unit is protected by DRM, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isRemoteControlled": {
          "description": "Check if the construct is remote controlled",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the construct is remote controlled, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "setEngineCommand": {
          "description": "Automatically assign the engines within the taglist\nto result in the given acceleration and angular acceleration provided. Can only be called within the system.onFlush event\nIf engines designated by the tags are not capable of producing the desired command, setEngineCommand will try to do its best\nto approximate it\nThis function must be used on a piloting controller in onFlush event\nOther included engines not in any priority will be used last",
          "params": [
            {
              "name": "taglist",
              "type": "string",
              "description": "Comma (for union) or space (for intersection) separated list of tags. You can set tags directly on the engines in the right-click menu"
            },
            {
              "name": "acceleration",
              "type": "table",
              "description": "The desired acceleration expressed in world coordinates in m/s2"
            },
            {
              "name": "angularAcceleration",
              "type": "table",
              "description": "The desired angular acceleration expressed in world coordinates in rad/s2"
            },
            {
              "name": "keepForceCollinearity",
              "type": "boolean",
              "description": "True to force the resulting acceleration vector to be collinear to the acceleration parameter"
            },
            {
              "name": "keepTorqueCollinearity",
              "type": "boolean",
              "description": "True to force the resulting angular acceleration vector to be collinear to the angular acceleration parameter"
            },
            {
              "name": "priority1SubTags",
              "type": "string",
              "description": "Comma (for union) or space (for intersection) separated list of tags of included engines to use as priority 1"
            },
            {
              "name": "priority2SubTags",
              "type": "string",
              "description": "Comma (for union) or space (for intersection) separated list of tags of included engines to use as priority 2"
            },
            {
              "name": "priority3SubTags",
              "type": "string",
              "description": "Comma (for union) or space (for intersection) separated list of tags of included engines to use as priority 3"
            },
            {
              "name": "toleranceRatioToStopCommand",
              "type": "number",
              "description": "When going through with priorities, if we reach a command that is achieved within this tolerance, we will stop there"
            }
          ],
          "isMethodStatic": true
        },
        "setEngineThrust": {
          "description": "Sets the thrust values for all engines in the tag list\nThis function must be used on a piloting controller",
          "params": [
            {
              "name": "taglist",
              "type": "string",
              "description": "Comma separated list of tags. You can set tags directly on the engines in the right-click menu"
            },
            {
              "name": "thrust",
              "type": "number",
              "description": "The desired thrust in newtons (note that for boosters, any non zero value here will set them to 100%)"
            }
          ],
          "isMethodStatic": true
        },
        "getEngineThrust": {
          "description": "Returns the total thrust values of all engines in the tag list\nThis function must be used on a piloting controller",
          "params": [
            {
              "name": "taglist",
              "type": "string",
              "description": "Comma separated list of tags. You can set tags directly on the engines in the right-click menu"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "The",
              "description": "total thrust in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "setAxisCommandValue": {
          "description": "Set the value of throttle in the cockpit, which will be displayed in the cockpit widget when flying\nThis function must be used on a piloting controller",
          "params": [
            {
              "name": "axis",
              "type": "integer",
              "description": "Longitudinal = 0, lateral = 1, vertical = 2"
            },
            {
              "name": "commandValue",
              "type": "number",
              "description": "In 'by throttle', the value of the throttle position: -1 = full reverse, 1 = full forward. Or In 'By Target Speed', the value of the target speed in km/h"
            }
          ],
          "isMethodStatic": true
        },
        "getAxisCommandValue": {
          "description": "Get the value of throttle in the cockpit\nThis function must be used on a piloting controller",
          "params": [
            {
              "name": "axis",
              "type": "integer",
              "description": "Longitudinal = 0, lateral = 1, vertical = 2"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "In travel mode, return the value of the throttle position: -1 = full reverse, 1 = full forward or in cruise mode, return the value of the target speed"
            }
          ],
          "isMethodStatic": true
        },
        "setupAxisCommandProperties": {
          "description": "Set the properties of an axis command\nThis function must be used on a piloting controller\nThese properties will be used to display the command in UI",
          "params": [
            {
              "name": "axis",
              "type": "integer",
              "description": "Longitudinal = 0, lateral = 1, vertical = 2"
            },
            {
              "name": "commandType",
              "type": "integer",
              "description": "By throttle = 0, by target speed = 1, hidden = 2"
            },
            {
              "name": "targetSpeedRanges",
              "type": "table",
              "description": "This is to specify the cruise control target speed ranges (for now, only for the longitudinal axis) in m/s"
            }
          ],
          "isMethodStatic": true
        },
        "getControlMode": {
          "description": "Returns the current control mode. The mode is set by clicking the UI button or using the associated keybinding\nThis function must be used on a piloting controller",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The current control mode (for now, only 2 are available, 0 and 1)"
            }
          ],
          "isMethodStatic": true
        },
        "getControlMasterModeId": {
          "deprecated": true,
          "description": "ControlUnit.getControlMasterModeId() is deprecated, use ControlUnit.getControlMode() instead.",
          "isMethodStatic": true
        },
        "cancelCurrentControlMasterMode": {
          "description": "Cancel the current master mode in use\nThis function must be used on a piloting controller",
          "isMethodStatic": true
        },
        "isMouseControlActivated": {
          "description": "Check if a mouse control scheme is selected\nThis function must be used on a piloting controller",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if a mouse control scheme is selected, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isMouseDirectControlActivated": {
          "description": "Check if the mouse control direct scheme is selected\nThis function must be used on a piloting controller",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if a direct mouse control scheme is selected, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isMouseVirtualJoystickActivated": {
          "description": "Check if the mouse control virtual joystick scheme is selected\nThis function must be used on a piloting controller",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if a mouse control virtual joystick scheme is selected, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "activateGroundEngineAltitudeStabilization": {
          "description": "The ground engines will stabilize to this altitude within their limits\nThe stabilization will be done by adjusting thrust to never go over the target altitude\nThis includes VerticalBooster and HoverEngine\nThis function must be used on a piloting controller",
          "params": [
            {
              "name": "targetAltitude",
              "type": "number",
              "description": "The stabilization target altitude in m"
            }
          ],
          "isMethodStatic": true
        },
        "getSurfaceEngineAltitudeStabilization": {
          "description": "Return the ground engines' stabilization altitude\nThis function must be used on a piloting controller",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Stab altitude in m or 0 if none is set"
            }
          ],
          "isMethodStatic": true
        },
        "deactivateGroundEngineAltitudeStabilization": {
          "description": "The ground engines will behave like regular engine\nThis includes VerticalBooster and HoverEngine\nThis function must be used on a piloting controller",
          "isMethodStatic": true
        },
        "computeGroundEngineAltitudeStabilizationCapabilities": {
          "description": "Returns ground engine stabilization altitude capabilities (lower and upper ranges)\nThis function must be used on a piloting controller",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Stabilization altitude capabilities for the least powerful engine and the most powerful engine"
            }
          ],
          "isMethodStatic": true
        },
        "getThrottle": {
          "description": "Return the current throttle value\nThis function must be used on a piloting controller",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Throttle value between -100 and 100"
            }
          ],
          "isMethodStatic": true
        },
        "setWidgetControlModeLabel": {
          "description": "Set the label of a control mode buttons shown in the control unit widget\nThis function must be used on a piloting controller",
          "params": [
            {
              "name": "modeId",
              "type": "integer",
              "description": "The control mode: 0=Travel Mode, 1=Cruise Control by default"
            },
            {
              "name": "label",
              "type": "string",
              "description": "The display name of the control mode, displayed on the widget button"
            }
          ],
          "isMethodStatic": true
        },
        "setupControlMasterModeProperties": {
          "deprecated": true,
          "description": "ControlUnit.setupControlMasterModeProperties() is deprecated, use ControlUnit.setWidgetControlModeLabel() instead.",
          "isMethodStatic": true
        },
        "isAnyLandingGearDeployed": {
          "description": "Checks if any landing gear is deployed",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if any landing gear is deployed, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isAnyLandingGearExtended": {
          "deprecated": true,
          "description": "ControlUnit.isAnyLandingGearDeployed() is deprecated, use ControlUnit.isAnyLandingGearExtended() instead.",
          "isMethodStatic": true
        },
        "deployLandingGears": {
          "description": "Deploy aall landing gears of the construct",
          "isMethodStatic": true
        },
        "extendLandingGears": {
          "deprecated": true,
          "description": "ControlUnit.extendLandingGears() is deprecated, use ControlUnit.deployLandingGears() instead.",
          "isMethodStatic": true
        },
        "retractLandingGears": {
          "description": "Retract all landing gears",
          "isMethodStatic": true
        },
        "isAnyHeadlightSwitchedOn": {
          "description": "Check construct lights status",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if any Headlight is on, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "switchOnHeadlights": {
          "description": "Turn on the construct headlights",
          "isMethodStatic": true
        },
        "switchOffHeadlights": {
          "description": "Turn off the construct headlights",
          "isMethodStatic": true
        }
      },
      "events": {
        "onTimer": {
          "description": "Emitted when the timer with the tag 'tag' is ticking",
          "params": [
            {
              "name": "tag",
              "type": "string",
              "description": "The tag of the timer that just ticked (see setTimer to set a timer with a given tag)"
            }
          ]
        },
        "tick": {}
      }
    },
    "CoreUnit": {
      "parent": "Element",
      "events": {
        "pvpTimer": {},
        "playerBoarded": {},
        "VRStationEntered": {},
        "constructDocked": {},
        "docked": {},
        "undocked": {},
        "onStressChanged": {
          "description": "Emitted when core unit stress changed",
          "params": [
            {
              "name": "stress",
              "type": "number",
              "description": "Difference to previous stress value"
            }
          ]
        },
        "stressChanged": {},
        "onElementBroken": {
          "description": "Emitted when an Element is broken",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            },
            {
              "name": "restorations",
              "type": "integer",
              "description": "The restorations remaining for the Element"
            }
          ]
        },
        "onElementRestored": {
          "description": "Emitted when an Element is restored",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            },
            {
              "name": "restorations",
              "type": "integer",
              "description": "The restorations remaining for the Element"
            }
          ]
        },
        "onElementDamaged": {
          "description": "Emitted when an Element is damaged",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            },
            {
              "name": "hitpoints",
              "type": "integer",
              "description": "The amount of hitpoints taken in damage"
            }
          ]
        },
        "onElementRepaired": {
          "description": "Emitted when an Element is repaired",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            },
            {
              "name": "hitpoints",
              "type": "integer",
              "description": "The amount of hitpoints repaired"
            }
          ]
        }
      },
      "methods": {
        "getConstructId": {
          "deprecated": true,
          "description": "CoreUnit.getConstructId() is deprecated, use construct.getId() instead.",
          "isMethodStatic": true
        },
        "getConstructName": {
          "deprecated": true,
          "description": "CoreUnit.getConstructName() is deprecated, use construct.getName() instead.",
          "isMethodStatic": true
        },
        "getConstructWorldPos": {
          "deprecated": true,
          "description": "CoreUnit.getConstructWorldPos() is deprecated, use construct.getWorldPosition() instead.",
          "isMethodStatic": true
        },
        "getWorldAirFrictionAcceleration": {
          "deprecated": true,
          "description": "CoreUnit.getWorldAirFrictionAcceleration() is deprecated, use construct.getWorldAirFrictionAcceleration() instead.",
          "isMethodStatic": true
        },
        "getWorldAirFrictionAngularAcceleration": {
          "deprecated": true,
          "description": "CoreUnit.getWorldAirFrictionAngularAcceleration() is deprecated, use construct.getWorldAirFrictionAngularAcceleration() instead.",
          "isMethodStatic": true
        },
        "getSchematicInfo": {
          "deprecated": true,
          "description": "CoreUnit.getSchematicInfo(schematicId) is deprecated, use System.getSchematic(id) instead.",
          "isMethodStatic": true
        },
        "getAngularVelocity": {
          "deprecated": true,
          "description": "CoreUnit.getAngularVelocity() is deprecated, use construct.getAngularVelocity() instead.",
          "isMethodStatic": true
        },
        "getWorldAngularVelocity": {
          "deprecated": true,
          "description": "CoreUnit.getWorldAngularVelocity() is deprecated, use construct.getWorldAngularVelocity() instead.",
          "isMethodStatic": true
        },
        "getAngularAcceleration": {
          "deprecated": true,
          "description": "CoreUnit.getAngularAcceleration() is deprecated, use construct.getAngularAcceleration() instead.",
          "isMethodStatic": true
        },
        "getWorldAngularAcceleration": {
          "deprecated": true,
          "description": "CoreUnit.getWorldAngularAcceleration() is deprecated, use construct.getWorldAngularAcceleration() instead.",
          "isMethodStatic": true
        },
        "getVelocity": {
          "deprecated": true,
          "description": "CoreUnit.getVelocity() is deprecated, use construct.getVelocity() instead.",
          "isMethodStatic": true
        },
        "getWorldVelocity": {
          "deprecated": true,
          "description": "CoreUnit.getWorldVelocity() is deprecated, use construct.getWorldVelocity() instead.",
          "isMethodStatic": true
        },
        "getAbsoluteVelocity": {
          "deprecated": true,
          "description": "CoreUnit.getAbsoluteVelocity() is deprecated, use construct.getAbsoluteVelocity() instead.",
          "isMethodStatic": true
        },
        "getWorldAbsoluteVelocity": {
          "deprecated": true,
          "description": "CoreUnit.getWorldAbsoluteVelocity() is deprecated, use construct.getWorldAbsoluteVelocity() instead.",
          "isMethodStatic": true
        },
        "getWorldAcceleration": {
          "deprecated": true,
          "description": "CoreUnit.getWorldAcceleration() is deprecated, use construct.getWorldAcceleration() instead.",
          "isMethodStatic": true
        },
        "getAcceleration": {
          "deprecated": true,
          "description": "CoreUnit.getAcceleration() is deprecated, use construct.getAcceleration() instead.",
          "isMethodStatic": true
        },
        "getOrientationUnitId": {
          "deprecated": true,
          "description": "CoreUnit.getOrientationUnitId() is deprecated, use construct.getOrientationUnitId() instead.",
          "isMethodStatic": true
        },
        "getConstructOrientationUp": {
          "deprecated": true,
          "description": "CoreUnit.getConstructOrientationUp() is deprecated, use construct.getOrientationUp() instead.",
          "isMethodStatic": true
        },
        "getConstructOrientationRight": {
          "deprecated": true,
          "description": "CoreUnit.getConstructOrientationRight() is deprecated, use construct.getOrientationRight() instead.",
          "isMethodStatic": true
        },
        "getConstructOrientationForward": {
          "deprecated": true,
          "description": "CoreUnit.getConstructOrientationForward() is deprecated, use construct.getOrientationForward() instead.",
          "isMethodStatic": true
        },
        "getConstructWorldOrientationUp": {
          "deprecated": true,
          "description": "CoreUnit.getConstructWorldOrientationUp() is deprecated, use construct.getWorldOrientationUp() instead.",
          "isMethodStatic": true
        },
        "getConstructWorldOrientationRight": {
          "deprecated": true,
          "description": "CoreUnit.getConstructWorldOrientationRight() is deprecated, use construct.getWorldOrientationRight() instead.",
          "isMethodStatic": true
        },
        "getConstructWorldOrientationForward": {
          "deprecated": true,
          "description": "CoreUnit.getConstructWorldOrientationForward() is deprecated, use construct.getWorldOrientationForward() instead.",
          "isMethodStatic": true
        },
        "getConstructWorldUp": {
          "deprecated": true,
          "description": "CoreUnit.getConstructWorldUp() is deprecated, use construct.getWorldUp() instead.",
          "isMethodStatic": true
        },
        "getConstructWorldRight": {
          "deprecated": true,
          "description": "CoreUnit.getConstructWorldRight() is deprecated, use construct.getWorldRight() instead.",
          "isMethodStatic": true
        },
        "getConstructWorldForward": {
          "deprecated": true,
          "description": "CoreUnit.getConstructWorldForward() is deprecated, use construct.getWorldForward() instead.",
          "isMethodStatic": true
        },
        "getPvPTimer": {
          "deprecated": true,
          "description": "CoreUnit.getPvPTimer() is deprecated, use construct.getPvPTimer() instead.",
          "isMethodStatic": true
        },
        "getPlayersOnBoard": {
          "deprecated": true,
          "description": "CoreUnit.getPlayersOnBoard() is deprecated, use construct.getPlayersOnBoard() instead.",
          "isMethodStatic": true
        },
        "getPlayersOnBoardInVRStation": {
          "deprecated": true,
          "description": "CoreUnit.getPlayersOnBoardInVRStation() is deprecated, use construct.getPlayersOnBoardInVRStation() instead.",
          "isMethodStatic": true
        },
        "getDockedConstructs": {
          "deprecated": true,
          "description": "CoreUnit.getDockedConstructs() is deprecated, use construct.getDockedConstructs() instead.",
          "isMethodStatic": true
        },
        "isPlayerBoarded": {
          "deprecated": true,
          "description": "CoreUnit.isPlayerBoarded(pid) is deprecated, use construct.isPlayerBoarded(id) instead.",
          "isMethodStatic": true
        },
        "isPlayerBoardedInVRStation": {
          "deprecated": true,
          "description": "CoreUnit.isPlayerBoardedInVRStation(pid) is deprecated, use construct.isPlayerBoardedInVRStation(id) instead.",
          "isMethodStatic": true
        },
        "isConstructDocked": {
          "deprecated": true,
          "description": "CoreUnit.isConstructDocked(cid) is deprecated, use construct.isConstructDocked(id) instead.",
          "isMethodStatic": true
        },
        "forceDeboard": {
          "deprecated": true,
          "description": "CoreUnit.forceDeboard(pid) is deprecated, use construct.forceDeboard(id) instead.",
          "isMethodStatic": true
        },
        "forceInterruptVRSession": {
          "deprecated": true,
          "description": "CoreUnit.forceInterruptVRSession(pid) is deprecated, use construct.forceInterruptVRSession(id) instead.",
          "isMethodStatic": true
        },
        "forceUndock": {
          "deprecated": true,
          "description": "CoreUnit.forceUndock(cid) is deprecated, use construct.forceUndock(id) instead.",
          "isMethodStatic": true
        },
        "getBoardedPlayerMass": {
          "deprecated": true,
          "description": "CoreUnit.getBoardedPlayerMass(pid) is deprecated, use construct.getBoardedPlayerMass(id) instead.",
          "isMethodStatic": true
        },
        "getBoardedInVRStationAvatarMass": {
          "deprecated": true,
          "description": "CoreUnit.getBoardedInVRStationAvatarMass(pid) is deprecated, use construct.getId() instead.",
          "isMethodStatic": true
        },
        "getDockedConstructMass": {
          "deprecated": true,
          "description": "CoreUnit.getDockedConstructMass(cid) is deprecated, use construct.getDockedConstructMass(id) instead.",
          "isMethodStatic": true
        },
        "getParent": {
          "deprecated": true,
          "description": "CoreUnit.getParent() is deprecated, use construct.getParent() instead.",
          "isMethodStatic": true
        },
        "getCloseParents": {
          "deprecated": true,
          "description": "CoreUnit.getCloseParents() is deprecated, use construct.getCloseParents() instead.",
          "isMethodStatic": true
        },
        "getClosestParent": {
          "deprecated": true,
          "description": "CoreUnit.getClosestParent() is deprecated, use construct.getClosestParent() instead.",
          "isMethodStatic": true
        },
        "dock": {
          "deprecated": true,
          "description": "CoreUnit.dock(cid) is deprecated, use construct.dock(id) instead.",
          "isMethodStatic": true
        },
        "undock": {
          "deprecated": true,
          "description": "CoreUnit.undock() is deprecated, use construct.undock() instead.",
          "isMethodStatic": true
        },
        "setDockingMode": {
          "deprecated": true,
          "description": "CoreUnit.setDockingMode(mode) is deprecated, use construct.setDockingMode(mode) instead.",
          "isMethodStatic": true
        },
        "getDockingMode": {
          "deprecated": true,
          "description": "CoreUnit.getDockingMode() is deprecated, use construct.getDockingMode() instead.",
          "isMethodStatic": true
        },
        "getParentPosition": {
          "deprecated": true,
          "description": "CoreUnit.getParentPosition() is deprecated, use construct.getParentPosition() instead.",
          "isMethodStatic": true
        },
        "getParentWorldPosition": {
          "deprecated": true,
          "description": "CoreUnit.getParentWorldPosition() is deprecated, use construct.getParentWorldPosition() instead.",
          "isMethodStatic": true
        },
        "getParentForward": {
          "deprecated": true,
          "description": "CoreUnit.getParentForward() is deprecated, use construct.getParentForward() instead.",
          "isMethodStatic": true
        },
        "getParentUp": {
          "deprecated": true,
          "description": "CoreUnit.getParentUp() is deprecated, use construct.getParentUp() instead.",
          "isMethodStatic": true
        },
        "getParentRight": {
          "deprecated": true,
          "description": "CoreUnit.getParentRight() is deprecated, use construct.getParentRight() instead.",
          "isMethodStatic": true
        },
        "getParentWorldForward": {
          "deprecated": true,
          "description": "CoreUnit.getParentWorldForward() is deprecated, use construct.getParentWorldForward() instead.",
          "isMethodStatic": true
        },
        "getParentWorldUp": {
          "deprecated": true,
          "description": "CoreUnit.getParentWorldUp() is deprecated, use construct.getParentWorldUp() instead.",
          "isMethodStatic": true
        },
        "getParentWorldRight": {
          "deprecated": true,
          "description": "CoreUnit.getParentWorldRight() is deprecated, use construct.getParentWorldRight() instead.",
          "isMethodStatic": true
        },
        "getMaxSpeed": {
          "deprecated": true,
          "description": "CoreUnit.getMaxSpeed() is deprecated, use construct.getMaxSpeed() instead.",
          "isMethodStatic": true
        },
        "getMaxAngularSpeed": {
          "deprecated": true,
          "description": "CoreUnit.getMaxAngularSpeed() is deprecated, use construct.getMaxAngularSpeed() instead.",
          "isMethodStatic": true
        },
        "getMaxSpeedPerAxis": {
          "deprecated": true,
          "description": "CoreUnit.getMaxSpeedPerAxis() is deprecated, use construct.getMaxSpeedPerAxis() instead.",
          "isMethodStatic": true
        },
        "getConstructMass": {
          "deprecated": true,
          "description": "CoreUnit.getConstructMass() is deprecated, use construct.getMass() instead.",
          "isMethodStatic": true
        },
        "getConstructIMass": {
          "deprecated": true,
          "description": "CoreUnit.getConstructIMass() is deprecated, use construct.getInertialMass() instead.",
          "isMethodStatic": true
        },
        "getConstructCrossSection": {
          "deprecated": true,
          "description": "CoreUnit.getConstructCrossSection() is deprecated, use construct.getCrossSection() instead.",
          "isMethodStatic": true
        },
        "getMaxKinematicsParametersAlongAxis": {
          "deprecated": true,
          "description": "CoreUnit.getMaxKinematicsParametersAlongAxis(taglist, CRefAxis) is deprecated, use construct.getMaxThrustAlongAxis(taglist, CRefAxis) instead.",
          "isMethodStatic": true
        },
        "getElementIdList": {
          "description": "Returns the list of all the local IDs of the Elements of this construct",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The list of local IDs of the elements of the construct."
            }
          ],
          "isMethodStatic": true
        },
        "getElementNameById": {
          "description": "Returns the name of the Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The name of the Element"
            }
          ],
          "isMethodStatic": true
        },
        "getElementClassById": {
          "description": "Returns the class of the Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The class of the Element"
            }
          ],
          "isMethodStatic": true
        },
        "getElementClassIdById": {
          "description": "Returns the item id of the class of the Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The item ID of the item class"
            }
          ],
          "isMethodStatic": true
        },
        "getElementDisplayNameById": {
          "description": "Returns the display name of the Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The display name of the Element"
            }
          ],
          "isMethodStatic": true
        },
        "getElementTypeById": {
          "deprecated": true,
          "description": "CoreUnit.getElementTypeById(localId) is deprecated, use CoreUnit.getElementDisplayNameById(localId) instead.",
          "isMethodStatic": true
        },
        "getElementItemIdById": {
          "description": "Returns the item ID of the Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The item ID of the Element"
            }
          ],
          "isMethodStatic": true
        },
        "getElementHitPointsById": {
          "description": "Returns the current hitpoints of the Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current hitpoints of the Element"
            }
          ],
          "isMethodStatic": true
        },
        "getElementMaxHitPointsById": {
          "description": "Returns the maximum hitpoints of the Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getElementRestorationsById": {
          "description": "Returns the remaining restorations of the Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The restorations remaining for the Element"
            }
          ],
          "isMethodStatic": true
        },
        "getElementMaxRestorationsById": {
          "description": "Returns the maximum restorations of the Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The max restorations for the Element"
            }
          ],
          "isMethodStatic": true
        },
        "getElementMassById": {
          "description": "Returns the mass of the Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximum hitpoints of the Element"
            }
          ],
          "isMethodStatic": true
        },
        "getElementPositionById": {
          "description": "Returns the position of the Element, identified by its local ID, in construct local coordinates.",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": " The position of the Element in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getElementUpById": {
          "description": "Returns the up direction vector of the Element, identified by its local ID, in construct local coordinates",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The up direction vector of the Element identified by its local ID, in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getElementRightById": {
          "description": "Returns the right direction vector of the Element, identified by its local ID, in construct local coordinates",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The right direction vector of the Element identified by its local ID, in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getElementForwardById": {
          "description": "Returns the forward direction vector of the Element, identified by its local ID, in construct local coordinates",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The forward direction vector of the Element identified by its local ID, in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getElementIndustryInfoById": {
          "description": "Returns the status of the Industry Unit Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "info",
              "description": "If the Element is an Industry Unit, a table with fields {[int] state, [bool] stopRequested, [int] schematicId (deprecated = 0), [int] schematicsRemaining (deprecated = 0), [table] requiredSchematicIds {[int] id}, [int] requiredSchematicAmount, [int] unitsProduced, [int] remainingTime, [int] batchesRequested, [int] batchesRemaining, [float] maintainProductAmount, [int] currentProductAmount, [table] currentProducts:{{[int] id, [double] quantity},...}}"
            }
          ],
          "isMethodStatic": true
        },
        "getElementIndustryStatusById": {
          "deprecated": true,
          "description": "CoreUnit.getElementIndustryStatusById(localId) is deprecated, use CoreUnit.getElementIndustryInfoById(localId) instead.",
          "isMethodStatic": true
        },
        "getElementInPlugsById": {
          "description": "Returns the Element IN plug map, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "plugMap",
              "description": "The IN plug map of the Element as a table with fields per plug: {[int] type, [string] name, [int nullable] elementId, [bool] isRestricted, [list nullable] restrictedIds}"
            }
          ],
          "isMethodStatic": true
        },
        "getElementOutPlugsById": {
          "description": "Returns the Element OUT plug map, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the Element"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "plugMap",
              "description": "The OUT plug map of the Element as a table with fields per plug: {[int] type, [string] name, [int nullable] elementId, [bool] isRestricted, [list nullable] restrictedIds}"
            }
          ],
          "isMethodStatic": true
        },
        "getEngineTagsById": {
          "description": "Returns the list of engine tags for an Engine Element identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the engine"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The CSV string of the tags"
            }
          ],
          "isMethodStatic": true
        },
        "getElementTagsById": {
          "deprecated": true,
          "description": "CoreUnit.getElementTagsById(localId) is deprecated, use CoreUnit.getEngineTagsById(localId) instead.",
          "isMethodStatic": true
        },
        "setEngineTagsById": {
          "description": "Sets the list of engine tags for an Engine Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the engine"
            },
            {
              "name": "tags",
              "type": "string",
              "description": "The CSV string of the tags"
            },
            {
              "name": "ignore",
              "type": "boolean",
              "description": "(optional) True to ignore the default engine tags"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the tags have been applied, false if they have not"
            }
          ],
          "isMethodStatic": true
        },
        "setEngineTorqueById": {
          "description": "Sets the torque generation state for the Engine Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the engine"
            },
            {
              "name": "state",
              "type": "boolean",
              "description": "True to enable engine torque"
            }
          ],
          "isMethodStatic": true
        },
        "getEngineTorqueById": {
          "description": "Returns the torque generation state for the Engine Element, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the engine"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the torque generation is enabled, false if it is not"
            }
          ],
          "isMethodStatic": true
        },
        "isEngineIgnoringTagsById": {
          "description": "Checks if the engine element is ignoring default tags, identified by its local ID",
          "params": [
            {
              "name": "localId",
              "type": "integer",
              "description": "The local ID of the engine"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the engine ignores default engine tags, false if not"
            }
          ],
          "isMethodStatic": true
        },
        "getAltitude": {
          "description": "Returns the altitude above sea level, with respect to the closest planet (0 in space)",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The altitude above sea level in meters"
            }
          ],
          "isMethodStatic": true
        },
        "getGravityIntensity": {
          "description": "Returns the local gravity intensity",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The gravitation acceleration where the construct is located in m/s²"
            }
          ],
          "isMethodStatic": true
        },
        "g": {
          "deprecated": true,
          "description": "CoreUnit.g() is deprecated, use CoreUnit.getGravityIntensity() instead.",
          "isMethodStatic": true
        },
        "getWorldGravity": {
          "description": "Returns the local gravity vector in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The local gravity field vector in world coordinates in m/s2"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldVertical": {
          "description": "Returns the gravity unit vector, in world coordinates ({0,0,0} in space)",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The local gravity unit vector in world coordinates in meters"
            }
          ],
          "isMethodStatic": true
        },
        "getCurrentPlanetId": {
          "description": "Returns the id of the current close stellar body",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The id of the current close stellar body"
            }
          ],
          "isMethodStatic": true
        },
        "getCoreStress": {
          "description": "Returns the core's current stress, destroyed when reaching max stress",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The stress the core absorbed"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxCoreStress": {
          "description": "Returns the maximal stress the core can bear before it gets destroyed",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximal stress before destruction"
            }
          ],
          "isMethodStatic": true
        },
        "getCoreStressRatio": {
          "description": "Returns the core's current stress to max stress ratio",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The stress ratio, between 0 for no stress and 1 for destruction"
            }
          ],
          "isMethodStatic": true
        },
        "spawnNumberSticker": {
          "description": "Spawns a number sticker in the 3D world, with coordinates relative to the construct",
          "params": [
            {
              "name": "nb",
              "type": "integer",
              "description": "The number to display 0 to 9"
            },
            {
              "name": "x",
              "type": "number",
              "description": "The x-coordinate in the construct in meters. 0 = center"
            },
            {
              "name": "y",
              "type": "number",
              "description": "The y-coordinate in the construct in meters. 0 = center"
            },
            {
              "name": "z",
              "type": "number",
              "description": "The z-coordinate in the construct in meters. 0 = center"
            },
            {
              "name": "orientation",
              "type": "string",
              "description": "Orientation of the number. Possible values are \"front\", \"side\""
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "index",
              "description": "An index that can be used later to delete or move the item, -1 if error or maxnumber reached"
            }
          ],
          "isMethodStatic": true
        },
        "spawnArrowSticker": {
          "description": "Spawns an arrow sticker in the 3D world, with coordinates relative to the construct",
          "params": [
            {
              "name": "x",
              "type": "number",
              "description": "The x-coordinate in the construct in meters. 0 = center"
            },
            {
              "name": "y",
              "type": "number",
              "description": "the y-coordinate in the construct in meters. 0 = center"
            },
            {
              "name": "z",
              "type": "number",
              "description": "The z-coordinate in the construct in meters. 0 = center"
            },
            {
              "name": "orientation",
              "type": "string",
              "description": "Orientation of the arrow. Possible values are \"up\", \"down\", \"north\", \"south\", \"east\", \"west\""
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "index",
              "description": "An index that can be used later to delete or move the item, -1 if error or max number reached"
            }
          ],
          "isMethodStatic": true
        },
        "deleteSticker": {
          "description": "Delete the referenced sticker",
          "params": [
            {
              "name": "index",
              "type": "integer",
              "description": "Index of the sticker to delete"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the sticker has been successfuly deleted, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "moveSticker": {
          "description": "Move the referenced sticker",
          "params": [
            {
              "name": "index",
              "type": "integer",
              "description": "Index of the sticker to move"
            },
            {
              "name": "x",
              "type": "number",
              "description": "The x-coordinate in the construct in meters. 0 = center"
            },
            {
              "name": "y",
              "type": "number",
              "description": "The y-coordinate in the construct in meters. 0 = center"
            },
            {
              "name": "z",
              "type": "number",
              "description": "The z-coordinate in the construct in meters. 0 = center"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the sticker has been successfuly moved, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "rotateSticker": {
          "description": "Rotate the referenced sticker.",
          "params": [
            {
              "name": "index",
              "type": "integer",
              "description": "Index of the sticker to rotate"
            },
            {
              "name": "angle_x",
              "type": "number",
              "description": "Rotation along the x-axis in degrees"
            },
            {
              "name": "angle_y",
              "type": "number",
              "description": "Rotation along the y-axis in degrees"
            },
            {
              "name": "angle_z",
              "type": "number",
              "description": "Rotation along the z-axis in degrees"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the sticker has been successfuly rotated, false otherwise"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "Counter": {
      "parent": "Element",
      "methods": {
        "getIndex": {
          "description": "Returns the index of the current active output plug",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The index of the active plug"
            }
          ],
          "isMethodStatic": true
        },
        "getCounterState": {
          "deprecated": true,
          "description": "Counter.getCounterState() is deprecated, use Counter.getIndex() instead.",
          "isMethodStatic": true
        },
        "getMaxIndex": {
          "description": "Returns the maximum index of the counter",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The maximum index"
            }
          ],
          "isMethodStatic": true
        },
        "nextIndex": {
          "description": "Moves the next counter index",
          "isMethodStatic": true
        },
        "next": {
          "deprecated": true,
          "description": "Counter.next() is deprecated, use Counter.nextIndex() instead.",
          "isMethodStatic": true
        },
        "setIndex": {
          "description": "Sets the counter index",
          "params": [
            {
              "name": "index",
              "type": "integer",
              "description": "The index of the plug to activate"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "Databank": {
      "parent": "Element",
      "methods": {
        "clear": {
          "description": "Clear the Databank",
          "isMethodStatic": true
        },
        "getNbKeys": {
          "description": "Returns the number of keys that are stored inside the Databank",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The number of keys"
            }
          ],
          "isMethodStatic": true
        },
        "getKeyList": {
          "description": "Returns all the keys in the Databank",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The key list, as a list of string"
            }
          ],
          "isMethodStatic": true
        },
        "getKeys": {
          "deprecated": true,
          "description": "Databank.getKeys() is deprecated, use Databank.getKeyList().",
          "isMethodStatic": true
        },
        "hasKey": {
          "description": "Checks if the key is present in the Databank",
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "The key used to store a value"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the key exists, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "clearValue": {
          "description": "Remove the given key if the key is present in the Databank",
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "The key used to store a value"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the key has been successfully removed, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "setStringValue": {
          "description": "Stores a string value at the given key",
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "The key used to store the value"
            },
            {
              "name": "val",
              "type": "string",
              "description": "The value, as a string"
            }
          ],
          "isMethodStatic": true
        },
        "getStringValue": {
          "description": "Returns value stored in the given key as a string",
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "The key used to retrieve the value"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The value as a string"
            }
          ],
          "isMethodStatic": true
        },
        "setIntValue": {
          "description": "Stores an integer value at the given key",
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "The key used to store the value"
            },
            {
              "name": "val",
              "type": "integer",
              "description": "The value, as an integer"
            }
          ],
          "isMethodStatic": true
        },
        "getIntValue": {
          "description": "Returns value stored in the given key as an integer",
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "The key used to retrieve the value"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The value as an integer"
            }
          ],
          "isMethodStatic": true
        },
        "setFloatValue": {
          "description": "Stores a floating number value at the given key",
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "The key used to store the value"
            },
            {
              "name": "val",
              "type": "number",
              "description": "The value, as a floating number"
            }
          ],
          "isMethodStatic": true
        },
        "getFloatValue": {
          "description": "Returns value stored in the given key as a floating number",
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "The key used to retrieve the value"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The value as a floating number"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "DetectionZone": {
      "parent": "Element",
      "methods": {
        "getRadius": {
          "description": "Returns the detection zone radius",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The detection zone radius in meters"
            }
          ],
          "isMethodStatic": true
        },
        "getPlayers": {
          "description": "Returns the list of ids of the players in the detection zone",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The list of player ids"
            }
          ],
          "isMethodStatic": true
        }
      },
      "events": {
        "onEnter": {
          "description": "Emitted when a player enters in the detection zone",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the player. Use system.getPlayerName(id) to retrieve its name"
            }
          ]
        },
        "enter": {},
        "onLeave": {
          "description": "Emitted when a player leaves in the detection zone",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the player. Use system.getPlayerName(id) to retrieve its name"
            }
          ]
        },
        "leave": {}
      }
    },
    "Door": {
      "parent": "Element",
      "methods": {
        "open": {
          "description": "Open the door",
          "isMethodStatic": true
        },
        "activate": {
          "deprecated": true,
          "description": "Door.activate() is deprecated, use Door.open() instead.",
          "isMethodStatic": true
        },
        "close": {
          "description": "Close the door",
          "isMethodStatic": true
        },
        "deactivate": {
          "deprecated": true,
          "description": "Door.deactivate() is deprecated, use Door.close() instead.",
          "isMethodStatic": true
        },
        "isOpen": {
          "description": "Return the opening status of the door",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the door is open, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "Door.getState() is deprecated, use Door.isOpen() instead.",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the door",
          "isMethodStatic": true
        }
      }
    },
    "Element": {
      "methods": {
        "showWidget": {
          "description": "Show the element widget in the in-game widget stack",
          "isMethodStatic": true
        },
        "show": {
          "deprecated": true,
          "description": "Element.show() is deprecated, use Element.showWidget() instead.",
          "isMethodStatic": true
        },
        "hideWidget": {
          "description": "Hide the element widget in the in-game widget stack",
          "isMethodStatic": true
        },
        "hide": {
          "deprecated": true,
          "description": "Element.hide() is deprecated, use Element.hideWidget() instead.",
          "isMethodStatic": true
        },
        "getWidgetType": {
          "description": "Returns the widget type compatible with the element data",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "Widget type. \"\" if invalid."
            }
          ],
          "isMethodStatic": true
        },
        "getWidgetData": {
          "description": "Returns the element data as JSON",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "Data as JSON"
            }
          ],
          "isMethodStatic": true
        },
        "getData": {
          "deprecated": true,
          "description": "Element.getData() is deprecated, use Element.getWidgetData() instead.",
          "isMethodStatic": true
        },
        "getWidgetDataId": {
          "description": "Returns the element data ID",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "Data ID. \"\" if invalid"
            }
          ],
          "isMethodStatic": true
        },
        "getDataId": {
          "deprecated": true,
          "description": "Element.getDataId() is deprecated, use Element.getWidgetDataId() instead.",
          "isMethodStatic": true
        },
        "getName": {
          "description": "Returns the element name",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The element's name"
            }
          ],
          "isMethodStatic": true
        },
        "getClass": {
          "description": "Returns the class of the element",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The class name of the Element"
            }
          ],
          "isMethodStatic": true
        },
        "getElementClass": {
          "deprecated": true,
          "description": "Element.getElementClass() is deprecated, use Element.getClass() instead.",
          "isMethodStatic": true
        },
        "getClassId": {
          "description": "Returns the item id of the class of the Element",
          "params": [
            {
              "name": "return",
              "type": "integer",
              "description": "The item ID of the item class"
            }
          ],
          "isMethodStatic": true
        },
        "getMass": {
          "description": "Returns the mass of the element (includes the included items' mass when the Element is a Container)",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The mass of the element"
            }
          ],
          "isMethodStatic": true
        },
        "getItemId": {
          "description": "Returns the element item ID (to be used with system.getItem() function to get information about the element).",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The element item ID"
            }
          ],
          "isMethodStatic": true
        },
        "isInClassId": {
          "description": "Checks if the element is an element of the class given by its item id",
          "params": [
            {
              "name": "classId",
              "type": "integer",
              "description": "The item ID of the item class"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "True",
              "description": "if the element is a valid element of the given class, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isInClass": {
          "description": "Checks if the element is an element of the class given by its class name",
          "params": [
            {
              "name": "className",
              "type": "string",
              "description": "The name of the item class"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the element is a valid element of the given class, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getLocalId": {
          "description": "Returns the unique local ID of the element",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The element local ID"
            }
          ],
          "isMethodStatic": true
        },
        "getId": {
          "deprecated": true,
          "description": "Element.getId() is deprecated, use Element.getLocalId() instead.",
          "isMethodStatic": true
        },
        "getIntegrity": {
          "description": "Returns the element integrity between 0 and 100",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The integrity value; 0 = Element fully destroyed, 100 = Element fully functional"
            }
          ],
          "isMethodStatic": true
        },
        "getHitPoints": {
          "description": "Returns the element's current hitpoints (0 = destroyed)",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current element hitpoints"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxHitPoints": {
          "description": "Returns the element's maximal hitpoints",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximum element hitpoints"
            }
          ],
          "isMethodStatic": true
        },
        "getRemainingRestorations": {
          "description": "Returns the element's remaining number of restorations",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The number of restorations before the element is ultimately destroyed"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxRestorations": {
          "description": "Returns the element's maximal number of restorations",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The max number of restorations of the element"
            }
          ],
          "isMethodStatic": true
        },
        "getPosition": {
          "description": "Returns the position of the element in construct local coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The position of the element in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getBoundingBoxSize": {
          "description": "Returns the bounding box dimensions of the element.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The dimensions of the element bounding box"
            }
          ],
          "isMethodStatic": true
        },
        "getBoundingBoxCenter": {
          "description": "Returns the position of the center of bounding box of the element in local construct coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The dimensions the position of the center of bounding box"
            }
          ],
          "isMethodStatic": true
        },
        "getUp": {
          "description": "Returns the up direction vector of the element in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Up direction vector of the element in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getRight": {
          "description": "Returns the right direction vector of the element in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Right direction vector of the element in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getForward": {
          "description": "Returns the forward direction vector of the element in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Forward direction vector of the element in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldUp": {
          "description": "Returns the up direction vector of the element in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Up direction vector of the element in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldRight": {
          "description": "Returns the right direction vector of the element in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Right direction vector of the element in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldForward": {
          "description": "Returns the forward direction vector of the element in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Forward direction vector of the Element in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getInPlugs": {
          "description": "Returns the Element IN plug map",
          "returns": [
            {
              "type": "table",
              "name": "plugMap",
              "description": "The IN plug map of the Element as a table with fields per plug: {[int] type, [string] name, [int nullable] elementId, [bool] isRestricted, [list nullable] restrictedIds}"
            }
          ],
          "isMethodStatic": true
        },
        "getOutPlugs": {
          "description": "Returns the Element OUT plug map",
          "returns": [
            {
              "type": "table",
              "name": "plugMap",
              "description": "The OUT plug map of the Element as a table with fields per plug: {[int] type, [string] name, [int nullable] elementId, [bool] isRestricted, [list nullable] restrictedIds}"
            }
          ],
          "isMethodStatic": true
        },
        "setSignalIn": {
          "description": "Set the value of a signal in the specified IN plug of the Element.\nStandard plug names are built with the following syntax: direction-type-index. 'Direction' can be IN or OUT.\n'type' is one of the following: ITEM, FUEL, ELECTRICITY, SIGNAL, HEAT, FLUID, CONTROL, and 'index' is a number between 0 and\nthe total number of plugs of the given type in the given direction. Some plugs have special names like 'on' or 'off' for the\nManual Switch Unit. Just check in-game for the plug names if you have a doubt.",
          "params": [
            {
              "name": "plug",
              "type": "string",
              "description": "The plug name, in the form of IN-SIGNAL-index"
            },
            {
              "name": "state",
              "type": "integer",
              "description": "The plug signal state"
            }
          ],
          "isMethodStatic": true
        },
        "getSignalIn": {
          "description": "Returns the value of a signal in the specified IN plug of the Element.\nStandard plug names are built with the following syntax: direction-type-index. 'Direction' can be IN or OUT.\n'type' is one of the following: ITEM, FUEL, ELECTRICITY, SIGNAL, HEAT, FLUID, CONTROL, and 'index' is a number between 0 and\nthe total number of plugs of the given type in the given direction. Some plugs have special names like 'on' or 'off' for the\nManual Switch Unit. Just check in-game for the plug names if you have a doubt.",
          "params": [
            {
              "name": "plug",
              "type": "string",
              "description": "The plug name, in the form of IN-SIGNAL-index"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The plug signal state"
            }
          ],
          "isMethodStatic": true
        },
        "getSignalOut": {
          "description": "Returns the value of a signal in the specified OUT plug of the Element.\nStandard plug names are built with the following syntax: direction-type-index. 'Direction' can be IN or OUT.\n'type' is one of the following: ITEM, FUEL, ELECTRICITY, SIGNAL, HEAT, FLUID, CONTROL, and 'index' is a number between 0 and\nthe total number of plugs of the given type in the given direction. Some plugs have special names like 'on' or 'off' for the\nManual Switch Unit. Just check in-game for the plug names if you have a doubt.",
          "params": [
            {
              "name": "plug",
              "type": "string",
              "description": "The plug name, in the form of IN-SIGNAL-index"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The plug signal state"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "Emitter": {
      "parent": "Element",
      "methods": {
        "send": {
          "description": "Send a message on the given channel, limited to one transmission per frame and per channel",
          "params": [
            {
              "name": "channel",
              "type": "string",
              "description": "The channel name, limited to 64 characters. The message will not be sent if it exceeds this"
            },
            {
              "name": "message",
              "type": "string",
              "description": "The message to be transmitted, truncated to 512 characters in case of overflow"
            }
          ],
          "isMethodStatic": true
        },
        "getRange": {
          "description": "Returns the emitter range",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The range in meters"
            }
          ],
          "isMethodStatic": true
        }
      },
      "events": {
        "onSent": {
          "description": "Emitted when the emitter successfully sent a message",
          "params": [
            {
              "name": "channel",
              "type": "string",
              "description": "The channel name"
            },
            {
              "name": "message",
              "type": "string",
              "description": "The transmitted message"
            }
          ]
        }
      }
    },
    "Engine": {
      "parent": "Element",
      "methods": {
        "getObstructionFactor": {
          "description": "Returns the obstruction ratio of the engine exhaust by Elements and Voxels.\nThe more obstructed the engine is, the less properly it will work. Try to fix your design if this is the case",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The obstruction ratio of the engine"
            }
          ],
          "isMethodStatic": true
        },
        "getTags": {
          "description": "Returns the tags of the engine",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "Tags of the engine, in a CSV string"
            }
          ],
          "isMethodStatic": true
        },
        "setTags": {
          "description": "Set the tags of the engine",
          "params": [
            {
              "name": "tags",
              "type": "string",
              "description": "The CSV string of the tags"
            },
            {
              "name": "ignore",
              "type": "boolean",
              "description": "True to ignore the default engine tags"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the tags have been applied, false if they have not"
            }
          ],
          "isMethodStatic": true
        },
        "isIgnoringTags": {
          "description": "Checks if the engine is ignoring default tags",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the engine ignores default engine tags, false if not"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "Firework": {
      "parent": "Element",
      "events": {
        "onFired": {
          "description": "Emitted when a firework has just been fired"
        }
      },
      "methods": {
        "fire": {
          "description": "Fire the firework",
          "isMethodStatic": true
        },
        "activate": {
          "deprecated": true,
          "description": "Firework.activate() is deprecated, use Firework.open() instead.",
          "isMethodStatic": true
        },
        "setExplosionDelay": {
          "description": "Set the delay before the launched Fireworks explodes",
          "params": [
            {
              "name": "delay",
              "type": "number",
              "description": "The delay before explosion in seconds (maximum 5s)"
            }
          ],
          "isMethodStatic": true
        },
        "getExplosionDelay": {
          "description": "Returns the delay before the launched Fireworks explodes",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The delay before explosion in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "setLaunchSpeed": {
          "description": "Set the speed at which the firework will be launched (impacts its altitude, depending on the local gravity).",
          "params": [
            {
              "name": "speed",
              "type": "number",
              "description": "The launch speed in m/s (maximum 200m/s)"
            }
          ],
          "isMethodStatic": true
        },
        "getLaunchSpeed": {
          "description": "Returns the speed at which the firework will be launched",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The launch speed in m/s"
            }
          ],
          "isMethodStatic": true
        },
        "setType": {
          "description": "Set the type of launched firework (will affect which firework is picked in the attached Container)",
          "params": [
            {
              "name": "type",
              "type": "integer",
              "description": "The type index of the firework (Ball = 1, Ring = 2, Palmtree = 3, Shower = 4)"
            }
          ],
          "isMethodStatic": true
        },
        "getType": {
          "description": "Returns the type of launched firework",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The type index of the firework (Ball = 1, Ring = 2, Palmtree = 3, Shower = 4)"
            }
          ],
          "isMethodStatic": true
        },
        "setColor": {
          "description": "Set the color of the launched firework (will affect which firework is picked in the attached Container)",
          "params": [
            {
              "name": "color",
              "type": "integer",
              "description": "The color index of the firework (Blue = 1, Gold = 2, Green = 3, Purple = 4, Red = 5, Silver = 6)"
            }
          ],
          "isMethodStatic": true
        },
        "getColor": {
          "description": "Returns the color of the launched firework",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The color index of the firework (Blue = 1, Gold = 2, Green = 3, Purple = 4, Red = 5, Silver = 6)"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "ForceField": {
      "parent": "Element",
      "methods": {
        "deploy": {
          "description": "Deploys the forcefield",
          "isMethodStatic": true
        },
        "activate": {
          "deprecated": true,
          "description": "ForceField.activate() is deprecated, use ForceField.deploy() instead.",
          "isMethodStatic": true
        },
        "retract": {
          "description": "Retracts the forcefield",
          "isMethodStatic": true
        },
        "deactivate": {
          "deprecated": true,
          "description": "ForceField.deactivate() is deprecated, use ForceField.retract() instead.",
          "isMethodStatic": true
        },
        "isDeployed": {
          "description": "Checks if the forcefield is deployed",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the forcefield is deployed, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "ForceField.getState() is deprecated, use ForceField.isDeployed() instead.",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the forcefield",
          "isMethodStatic": true
        },
        "getCurrentLength": {
          "description": "Returns the current length of the forcefield",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current length of the forcefield"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxLength": {
          "description": "Returns the maximum length of the forcefield",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximum length of the forcefield (between 0 and the limit of the forcefield model)"
            }
          ],
          "isMethodStatic": true
        },
        "setMaxLength": {
          "description": "Sets the max length of the forcefield",
          "params": [
            {
              "name": "maxLength",
              "type": "integer",
              "description": "Maximum length (between 0 and the length limit)"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the maximum length was set, false if an error occurred"
            }
          ],
          "isMethodStatic": true
        },
        "getLengthLimit": {
          "description": "Returns the length limit of this forcefield model",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The length limit of this forcefield model"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "FueledEngine": {
      "parent": "Engine",
      "methods": {
        "activate": {
          "description": "Start the engine at full power (works only when run inside a cockpit or under remote control)",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Stops the engine (works only when run inside a cockpit or under remote control)",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Checks if the engine is active",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the engine is on, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "FueledEngine.getState() is deprecated, use FueledEngine.isActive().",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the state of the engine",
          "isMethodStatic": true
        },
        "setThrust": {
          "description": "Set the thrust of the engine",
          "params": [
            {
              "name": "thrust",
              "type": "number",
              "description": "The engine thrust in newtons (limited by the maximum thrust)"
            }
          ],
          "isMethodStatic": true
        },
        "getThrust": {
          "description": "Returns the current thrust of the engine",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The thrust of the engine is currently delivering in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxThrust": {
          "deprecated": true,
          "description": "FueledEngine.getMaxThrust() is deprecated, use FueledEngine.getCurrentMaxThrust().\n@diagnostic disable-next-line",
          "isMethodStatic": true
        },
        "getMaxThrustBase": {
          "deprecated": true,
          "description": "FueledEngine.getMaxThrustBase() is deprecated, use FueledEngine.getMaxThrust().",
          "isMethodStatic": true
        },
        "getCurrentMinThrust": {
          "description": "Returns the minimal thrust the engine can deliver at the moment (can be more than zero),\nwhich will depend on various conditions like atmospheric density, obstruction, orientation, etc\nMost of the time, this will be 0 but it can be greater than 0, particularly for Ailerons, in which case\nthe actual thrust will be at least equal to minThrust",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current minimal engine thrust in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getMinThrust": {
          "deprecated": true,
          "description": "FueledEngine.getMinThrust() is deprecated, use FueledEngine.getCurrentMinThrust().",
          "isMethodStatic": true
        },
        "getCurrentMaxThrust": {
          "description": "Returns the maximal thrust the engine can deliver at the moment, which might depend on\nvarious conditions like atmospheric density, obstruction, orientation, etc. The actual thrust will be\nanything below this maxThrust, which defines the current max capability of the engine",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current maximum engine thrust in newtons"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxThrustEfficiency": {
          "description": "Returns the ratio between the current maximum thrust and the optimal maximum thrust",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Usually 1 but can be lower for certain engines"
            }
          ],
          "isMethodStatic": true
        },
        "isTorqueEnabled": {
          "description": "Checks if the torque generation is enabled on the engine",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the torque is enabled on the engine, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "enableTorque": {
          "description": "Sets the torque generation state on the engine",
          "params": [
            {
              "name": "state",
              "type": "boolean",
              "description": ""
            }
          ],
          "isMethodStatic": true
        },
        "getThrustAxis": {
          "description": "Returns the engine thrust direction in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The engine thrust direction vector in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getTorqueAxis": {
          "description": "Returns the engine torque axis in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The torque axis vector in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldThrustAxis": {
          "description": "Returns the engine exhaust thrust direction in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The engine thrust direction vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "thrustAxis": {
          "deprecated": true,
          "description": "FueledEngine.thrustAxis() is deprecated, use FueledEngine.getWorldThrustAxis().",
          "isMethodStatic": true
        },
        "getWorldTorqueAxis": {
          "description": "Returns the engine torque axis in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The torque axis vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "torqueAxis": {
          "deprecated": true,
          "description": "FueledEngine.torqueAxis() is deprecated, use FueledEngine.getWorldTorqueAxis().",
          "isMethodStatic": true
        },
        "isOutOfFuel": {
          "description": "Checks if the engine out of fuel",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the engine is out of fuel, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getFuelId": {
          "description": "Returns the item ID of the fuel currently used by the engine",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The item ID of the fuel currently used"
            }
          ],
          "isMethodStatic": true
        },
        "getFuelTankId": {
          "description": "Returns the local ID of the fueltank linked to the engine",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The local ID of the fueltank"
            }
          ],
          "isMethodStatic": true
        },
        "hasFunctionalFuelTank": {
          "description": "Checks if the engine linked to a functional Fuel Tank (not broken or colliding)?",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the linked tank is functional, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "hasBrokenFuelTank": {
          "deprecated": true,
          "description": "FueledEngine.hasBrokenFuelTank() is deprecated, use FueledEngine.hasFunctionalFuelTank().",
          "isMethodStatic": true
        },
        "getCurrentFuelRate": {
          "description": "Returns the engine fuel consumption rate per newton of thrust delivered per second",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current rate of fuel consumption in m³/(N.s)"
            }
          ],
          "isMethodStatic": true
        },
        "getFuelRateEfficiency": {
          "description": "Returns the ratio between the current fuel rate and the theoretical nominal fuel rate",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Usually 1 but can be higher for certain engines at certain speeds"
            }
          ],
          "isMethodStatic": true
        },
        "getFuelConsumption": {
          "description": "Returns the current fuel consumption rate",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The rate of fuel consumption in m3/s"
            }
          ],
          "isMethodStatic": true
        },
        "getWarmupTime": {
          "description": "Returns the T50; the time needed for the engine to reach 50% of its maximal thrust (all engines\ndo not instantly reach the thrust that is set for them, but they can take time to \"warm up\" to\nthe final value)",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The time to half thrust in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getT50": {
          "deprecated": true,
          "description": "FueledEngine.getT50() is deprecated, use FueledEngine.getWarmupTime().",
          "isMethodStatic": true
        }
      }
    },
    "null": null,
    "Gyro": {
      "parent": "Element",
      "methods": {
        "activate": {
          "description": "Selects this gyro as the main gyro used for ship orientation",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Deselects this gyro as the main gyro used for ship orientation, using the Core Unit instead",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the activation state of the gyro",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Returns the activation state of the gyro",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the gyro is the active ship orientation unit, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "Gyro.getState() is deprecated, use Gyro.isActive() instead.",
          "isMethodStatic": true
        },
        "getPitch": {
          "description": "The pitch value relative to the gyro orientation and the local gravity",
          "returns": [
            {
              "type": "number",
              "name": "pitch",
              "description": "The pitch angle in degrees, relative to the gyro orientation and the local gravity"
            }
          ],
          "isMethodStatic": true
        },
        "getRoll": {
          "description": "The roll value relative to the gyro orientation and the local gravity",
          "returns": [
            {
              "type": "number",
              "name": "roll",
              "description": "The roll angle in degrees, relative to the gyro orientation and the local gravity"
            }
          ],
          "isMethodStatic": true
        },
        "localUp": {
          "deprecated": true,
          "description": "Gyro.localUp() is deprecated, use Gyro.getUp() instead.",
          "isMethodStatic": true
        },
        "localForward": {
          "deprecated": true,
          "description": "Gyro.localForward() is deprecated, use Gyro.getForward() instead.",
          "isMethodStatic": true
        },
        "localRight": {
          "deprecated": true,
          "description": "Gyro.localRight() is deprecated, use Gyro.getRight() instead.",
          "isMethodStatic": true
        },
        "worldUp": {
          "deprecated": true,
          "description": "Gyro.worldUp() is deprecated, use Gyro.getWorldUp() instead.",
          "isMethodStatic": true
        },
        "worldForward": {
          "deprecated": true,
          "description": "Gyro.worldForward() is deprecated, use Gyro.getWorldForward() instead.",
          "isMethodStatic": true
        },
        "worldRight": {
          "deprecated": true,
          "description": "Gyro.worldRight() is deprecated, use Gyro.getWorldRight() instead.",
          "isMethodStatic": true
        }
      }
    },
    "HoverEngine": {
      "parent": "SurfaceEngine"
    },
    "Industry": {
      "parent": "Element",
      "methods": {
        "startRun": {
          "description": "Start the production, and it will run unless it is stopped or the input resources run out",
          "isMethodStatic": true
        },
        "start": {
          "deprecated": true,
          "description": "Industry.start() is deprecated, use Industry.startRun() instead.",
          "isMethodStatic": true
        },
        "startMaintain": {
          "description": "Start maintaining the specified quantity. Resumes production when the quantity in the output Container is too low, and pauses production when it is equal or higher",
          "params": [
            {
              "name": "quantity",
              "type": "integer",
              "description": "Quantity to maintain inside output containers"
            }
          ],
          "isMethodStatic": true
        },
        "startAndMaintain": {
          "deprecated": true,
          "description": "Industry.startAndMaintain(quantity) is deprecated, use Industry.startMaintain(quantity) instead.",
          "isMethodStatic": true
        },
        "startFor": {
          "description": "Start the production of numBatches and then stop",
          "params": [
            {
              "name": "numBatches",
              "type": "integer",
              "description": "Number of batches to run before unit stops"
            }
          ],
          "isMethodStatic": true
        },
        "batchStart": {
          "deprecated": true,
          "description": "Industry.batchStart(quantity) is deprecated, use Industry.startFor(numBatches) instead.",
          "isMethodStatic": true
        },
        "stop": {
          "description": "Stop the production of the industry unit",
          "params": [
            {
              "name": "force",
              "type": "boolean",
              "description": "(optional by default false) True if you want to force the production to stop immediately"
            },
            {
              "name": "allowLoss",
              "type": "boolean",
              "description": "(optional by default false) True if you want to allow the industry unit to lose components when recovering in use components"
            }
          ],
          "isMethodStatic": true
        },
        "hardStop": {
          "deprecated": true,
          "description": "Industry.hardStop(allowLoss) is deprecated, use Industry.stop(true,allowLoss) instead.",
          "isMethodStatic": true
        },
        "softStop": {
          "deprecated": true,
          "description": "Industry.softStop() is deprecated, use Industry.stop(false,false) instead.",
          "isMethodStatic": true
        },
        "getState": {
          "description": "Get the current running state of the industry",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "(Stopped = 1, Running = 2, Jammed missing ingredient = 3, Jammed output full = 4, Jammed no output container = 5, Pending = 6, Jammed missing schematics = 7)"
            }
          ],
          "isMethodStatic": true
        },
        "getStatus": {
          "deprecated": true,
          "description": "Industry.getStatus() is deprecated, use Industry.getState() instead.",
          "isMethodStatic": true
        },
        "getInfo": {
          "description": "Returns the complete information of the industry",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The complete state of the industry, a table with fields {[int] state, [bool] stopRequested, [int] schematicId (deprecated = 0), [int] schematicsRemaining (deprecated = 0), [table] requiredSchematicIds {[int] id}, [int] requiredSchematicAmount, [int] unitsProduced, [int] remainingTime, [int] batchesRequested, [int] batchesRemaining, [float] maintainProductAmount, [int] currentProductAmount, [table] currentProducts:{{[int] id, [double] quantity},...}}"
            }
          ],
          "isMethodStatic": true
        },
        "getCyclesCompleted": {
          "description": "Get the count of completed cycles since the player started the unit",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The count of completed cycles since startup"
            }
          ],
          "isMethodStatic": true
        },
        "getCycleCountSinceStartup": {
          "deprecated": true,
          "description": "Industry.getCycleCountSinceStartup() is deprecated, use Industry.getCyclesCompleted() instead.",
          "isMethodStatic": true
        },
        "getEfficiency": {
          "description": "Returns the efficiency of the industry",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The efficiency rate between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "getUptime": {
          "description": "Returns the time elapsed in seconds since the player started the unit for the latest time",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The time elapsed in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getInputs": {
          "description": "Returns the list of items required to run the selected output product.",
          "returns": [
            {
              "type": "table",
              "name": "outputs",
              "description": "Returns the list of products"
            }
          ],
          "isMethodStatic": true
        },
        "getRequiredSchematicIds": {
          "description": "Returns the list of item ids of the currently required schematics. Empty if there are no required schematic.",
          "returns": [
            {
              "type": "table",
              "name": "Returns",
              "description": "the list of item ids of the currently required schematics"
            }
          ],
          "isMethodStatic": true
        },
        "getOutputs": {
          "description": "Returns the list of id of the items currently produced.",
          "returns": [
            {
              "type": "table",
              "name": "outputs",
              "description": "The first entry in the table is always the main product produced"
            }
          ],
          "isMethodStatic": true
        },
        "getCurrentSchematic": {
          "deprecated": true,
          "description": "Industry.getCurrentSchematic() is deprecated.",
          "isMethodStatic": true
        },
        "setOutput": {
          "description": "Set the item to produce from its id",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The item id of the item to produce"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "success",
              "description": "The result of the operation 0 for a sucess, -1 if the industry is running"
            }
          ],
          "isMethodStatic": true
        },
        "setCurrentSchematic": {
          "deprecated": true,
          "description": "Industry.setCurrentSchematic(id) is deprecated, use Industry.setOutput(itemId) instead.",
          "isMethodStatic": true
        },
        "updateBank": {
          "description": "Send a request to get an update of the content of the schematic bank, limited to one call allowed per 30 seconds",
          "returns": [
            {
              "type": "number",
              "name": "time",
              "description": "If the request is not yet possible, returns the remaining time to wait for"
            }
          ],
          "isMethodStatic": true
        },
        "getBank": {
          "description": "Returns a table describing the contents of the schematic bank, as a pair itemId and quantity per slot",
          "returns": [
            {
              "type": "table",
              "name": "content",
              "description": "The content of the schematic bank as a table with fields {[int] id, [float] quantity} per slot"
            }
          ],
          "isMethodStatic": true
        }
      },
      "events": {
        "onStarted": {
          "description": "Emitted when the Industry Unit has started a new production process",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The product item id"
            },
            {
              "name": "quantity",
              "type": "number",
              "description": "The product quantity"
            }
          ]
        },
        "onCompleted": {
          "description": "Emitted when the Industry Unit has completed a run",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The product item id"
            },
            {
              "name": "quantity",
              "type": "number",
              "description": "The product quantity"
            }
          ]
        },
        "completed": {},
        "onStatusChanged": {
          "description": "Emitted when the industry status has changed",
          "params": [
            {
              "name": "status",
              "type": "integer",
              "description": "The status of the industry can be (Stopped = 1, Running = 2, Jammed missing ingredient = 3, Jammed output full = 4, Jammed no output container = 5, Pending = 6)"
            }
          ]
        },
        "statusChanged": {},
        "onBankUpdate": {
          "description": "Emitted when the schematic bank content is updated(bank update or after a manual request made with updateBank())"
        }
      }
    },
    "LandingGear": {
      "parent": "Element",
      "methods": {
        "deploy": {
          "description": "Deploys the landing gear",
          "isMethodStatic": true
        },
        "activate": {
          "deprecated": true,
          "description": "LandingGear.activate() is deprecated, use LandingGear.deploy() instead.",
          "isMethodStatic": true
        },
        "retract": {
          "description": "Retracts the landing gear",
          "isMethodStatic": true
        },
        "deactivate": {
          "deprecated": true,
          "description": "LandingGear.deactivate() is deprecated, use LandingGear.retract() instead.",
          "isMethodStatic": true
        },
        "isDeployed": {
          "description": "Checks if the landing gear is deployed",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the landing gear is deployed, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "LandingGear.getState() is deprecated, use LandingGear.isDeployed() instead.",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the landing gear",
          "isMethodStatic": true
        }
      }
    },
    "LaserDetector": {
      "parent": "Element",
      "events": {
        "onHit": {
          "description": "Emitted when a laser hit the detector"
        },
        "laserHit": {},
        "onLoss": {
          "description": "Emitted when all lasers stop hitting the detector"
        },
        "laserRelease": {}
      },
      "methods": {
        "isHit": {
          "description": "Checks if any laser is hitting the detector",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if a laser is hitting the detector, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "LaserDetector.getState() is deprecated, use LaserDetector.isHit() instead.",
          "isMethodStatic": true
        }
      }
    },
    "LaserEmitter": {
      "parent": "Element",
      "methods": {
        "activate": {
          "description": "Activates the laser emitter",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Deactivates the laser emitter",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the laser emitter",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Checks if the laser emitter is active",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the laser emitter is active, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "LaserEmitter.getState() is deprecated, use LaserEmitter.isActive() instead.",
          "isMethodStatic": true
        }
      }
    },
    "Library": {
      "methods": {
        "systemResolution3": {
          "description": "Solve the 3D linear system M*x=c0 where M is defined by its column vectors c1,c2,c3",
          "params": [
            {
              "name": "c1",
              "type": "table",
              "description": "The first column of the matrix M"
            },
            {
              "name": "c2",
              "type": "table",
              "description": "The second column of the matrix M"
            },
            {
              "name": "c3",
              "type": "table",
              "description": "The third column of the matrix M"
            },
            {
              "name": "c0",
              "type": "table",
              "description": "The target column vector of the system"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The vec3 solution of the above system"
            }
          ],
          "isMethodStatic": true
        },
        "systemResolution2": {
          "description": "Solve the 2D linear system M*x=c0 where M is defined by its column vectors c1,c2",
          "params": [
            {
              "name": "c1",
              "type": "table",
              "description": "The first column of the matrix M"
            },
            {
              "name": "c2",
              "type": "table",
              "description": "The second column of the matrix M"
            },
            {
              "name": "c0",
              "type": "table",
              "description": "The target column vector of the system"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The vec2 solution of the above system"
            }
          ],
          "isMethodStatic": true
        },
        "getPointOnScreen": {
          "description": "Returns the position of the given point in world coordinates system, on the game screen",
          "params": [
            {
              "name": "worldPos",
              "type": "table:",
              "description": "The world position of the point"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The position in percentage (between 0 and 1) of the screen resolution as vec3 with {x, y, depth}"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "Light": {
      "parent": "Element",
      "methods": {
        "activate": {
          "description": "Switches the light on",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Switches the light off",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Checks if the light is on",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the light is on, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "Light.getState() is deprecated, use Light.isActive() instead.",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the state of the light",
          "isMethodStatic": true
        },
        "setColor": {
          "description": "Set the light color in RGB. Lights can use HDR color values above 1.0 to glow.",
          "params": [
            {
              "name": "r",
              "type": "number",
              "description": "The red component, between 0.0 and 1.0, up to 5.0 for HDR colors."
            },
            {
              "name": "g",
              "type": "number",
              "description": "The green component, between 0.0 and 1.0, up to 5.0 for HDR colors."
            },
            {
              "name": "b",
              "type": "number",
              "description": "The blue component, between 0.0 and 1.0, up to 5.0 for HDR colors."
            }
          ],
          "isMethodStatic": true
        },
        "setRGBColor": {
          "deprecated": true,
          "description": "Light.setRGBColor(r,g,b) is deprecated, use Light.setColor(r,g,b) instead.",
          "isMethodStatic": true
        },
        "getColor": {
          "description": "Returns the light color in RGB",
          "returns": [
            {
              "type": "table",
              "name": "color",
              "description": " An array of number for the red, blue and green components of the light, with values between 0.0 and 1.0, up to 5.0."
            }
          ],
          "isMethodStatic": true
        },
        "getRGBColor": {
          "deprecated": true,
          "description": "Light.getRGBColor() is deprecated, use Light.getColor() instead.",
          "isMethodStatic": true
        },
        "setBlinkingState": {
          "description": "Returns the blinking state of the light",
          "params": [
            {
              "name": "state",
              "type": "boolean",
              "description": "True to enable light blinking"
            }
          ],
          "isMethodStatic": true
        },
        "isBlinking": {
          "description": "Checks if the light blinking is enabled",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the light blinking is enabled, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getOnBlinkingDuration": {
          "description": "Returns the light 'on' blinking duration",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The duration of the 'on' blinking in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "setOnBlinkingDuration": {
          "description": "Set the light 'on' blinking duration",
          "params": [
            {
              "name": "time",
              "type": "number",
              "description": "The duration of the 'on' blinking in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getOffBlinkingDuration": {
          "description": "Returns the light 'off' blinking duration",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The duration of the 'off' blinking in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "setOffBlinkingDuration": {
          "description": "Set the light 'off' blinking duration",
          "params": [
            {
              "name": "time",
              "type": "number",
              "description": "The duration of the 'off' blinking in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getBlinkingTimeShift": {
          "description": "Returns the light blinking time shift",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The time shift of the blinking in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "setBlinkingTimeShift": {
          "description": "Set the light blinking time shift",
          "params": [
            {
              "name": "shift",
              "type": "number",
              "description": "The time shift of the blinking in seconds"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "ManualButton": {
      "parent": "Element",
      "events": {
        "onPressed": {
          "description": "Emitted when the button is pressed"
        },
        "pressed": {},
        "onReleased": {
          "description": "Emitted when the button is released"
        },
        "released": {}
      },
      "methods": {
        "isDown": {
          "description": "Checks if the manual button is down",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the manual button is down, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "ManualButton.getState() is deprecated, use ManualButton.isDown() instead.",
          "isMethodStatic": true
        }
      }
    },
    "ManualSwitch": {
      "parent": "Element",
      "events": {
        "onPressed": {
          "description": "Emitted when the button is pressed"
        },
        "pressed": {},
        "onReleased": {
          "description": "Emitted when the button is released"
        },
        "released": {}
      },
      "methods": {
        "activate": {
          "description": "Switches the switch on",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Switches the switch off",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the switch",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Checks if the switch is active",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the switch is active, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "ManualSwitch.getState() is deprecated, use ManualSwitch.isActive() instead.",
          "isMethodStatic": true
        }
      }
    },
    "MiningUnit": {
      "parent": "Element",
      "methods": {
        "getState": {
          "description": "Returns the current state of the mining unit",
          "returns": [
            {
              "type": "integer",
              "name": "state",
              "description": "The status of the mining unit can be (Stopped = 1, Running = 2, Jammed output full = 3, Jammed no output container = 4)"
            }
          ],
          "isMethodStatic": true
        },
        "getStatus": {
          "deprecated": true,
          "description": "MiningUnit.getStatus() is deprecated, use MiningUnit.getState() instead.",
          "isMethodStatic": true
        },
        "getRemainingTime": {
          "description": "Returns the remaining time of the current batch extraction process.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The remaining time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getActiveOre": {
          "description": "Returns the item ID of the currently selected ore.",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The item ID of the selected ore"
            }
          ],
          "isMethodStatic": true
        },
        "getOrePools": {
          "description": "Returns the list of available ore pools",
          "returns": [
            {
              "type": "table",
              "name": "pool",
              "description": "A list of tables composed with {[int] oreId, [float] available, [float] maximum}"
            }
          ],
          "isMethodStatic": true
        },
        "getBaseRate": {
          "description": "Returns the base production rate of the mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The production rate in L/h"
            }
          ],
          "isMethodStatic": true
        },
        "getEfficiency": {
          "description": "Returns the efficiency rate of the mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The efficiency rate between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "getCalibrationRate": {
          "description": "Returns the calibration rate of the mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The calibration rate of the mining unit between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "getOptimalRate": {
          "description": "Returns the optimal calibration rate of the mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The optimal calibration rate of the mining unit between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "getProductionRate": {
          "description": "Returns the current production rate of the mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The production rate in L/h"
            }
          ],
          "isMethodStatic": true
        },
        "getAdjacencyBonus": {
          "description": "Returns the territory's adjacency bonus to the territory of the mining unit. Note: This value is updated only when a new batch is started.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The territory's adjacency bonus"
            }
          ],
          "isMethodStatic": true
        },
        "getLastExtractionPosition": {
          "description": "Returns the position of the last calibration excavation, in world coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The coordinates in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getLastExtractingPlayerId": {
          "description": "Returns the ID of the last player who calibrated the mining unit.",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The ID of the player"
            }
          ],
          "isMethodStatic": true
        },
        "getLastExtractionTime": {
          "description": "Returns the time in seconds since the last calibration of the mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The time in seconds with milliseconds precision"
            }
          ],
          "isMethodStatic": true
        },
        "getLastExtractedOre": {
          "description": "Returns the item ID of the ore extracted during the last calibration excavation.",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The item ID of the extracted ore"
            }
          ],
          "isMethodStatic": true
        },
        "getLastExtractedVolume": {
          "description": "Returns the volume of ore extracted during the last calibration excavation.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The volume of ore extracted in L"
            }
          ],
          "isMethodStatic": true
        }
      },
      "events": {
        "onCalibrated": {
          "description": "Emitted when the mining unit is calibrated.",
          "params": [
            {
              "name": "oreId",
              "type": "integer",
              "description": "The item ID of the ore extracted during the calibration process"
            },
            {
              "name": "amount",
              "type": "number",
              "description": "Amount of ore extracted during the calibration process"
            },
            {
              "name": "rate",
              "type": "number",
              "description": "The new calibration rate after calibration process"
            }
          ]
        },
        "calibrated": {},
        "onStarted": {
          "description": "Emitted when the mining unit started a new extraction process.",
          "params": [
            {
              "name": "oreId",
              "type": "number",
              "description": "The item ID of the ore mined during the extraction process"
            }
          ]
        },
        "onCompleted": {
          "description": "Emitted when the mining unit complete a batch.",
          "params": [
            {
              "name": "oreId",
              "type": "number",
              "description": "The item ID of the ore mined during the extraction process"
            },
            {
              "name": "amount",
              "type": "number",
              "description": "Amount of ore mined"
            }
          ]
        },
        "completed": {},
        "onStatusChanged": {
          "description": "Emitted when the mining unit status is changed.",
          "params": [
            {
              "name": "status",
              "type": "integer",
              "description": "The status of the mining unit can be (Stopped = 1, Running = 2, Jammed output full = 3, Jammed no output container = 4)"
            }
          ]
        },
        "statusChanged": {},
        "onStopped": {
          "description": "Emitted when the mining unit stopped the extraction process."
        }
      }
    },
    "PlasmaExtractor": {
      "parent": "Element",
      "methods": {
        "getStatus": {
          "description": "Returns the current status of the plasma extractor",
          "returns": [
            {
              "type": "integer",
              "name": "status",
              "description": "The status of the plasma extractor can be (Stopped = 1, Running = 2, Jammed output full = 3, Jammed no output container = 4)"
            }
          ],
          "isMethodStatic": true
        },
        "getRemainingTime": {
          "description": "Returns the remaining time of the current batch extraction process.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The remaining time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getPlasmaPools": {
          "description": "Returns the list of available plasma pools",
          "returns": [
            {
              "type": "table",
              "name": "pool",
              "description": "A list of tables composed with {[int] oreId, [int] quantity};"
            }
          ],
          "isMethodStatic": true
        }
      },
      "events": {
        "onStarted": {
          "description": "Emitted when the plasma extractor started a new extraction process"
        },
        "onCompleted": {
          "description": "Emitted when the plasma extractor complete a batch"
        },
        "onStatusChanged": {
          "description": "Emitted when the plasma extractor status is changed",
          "params": [
            {
              "name": "status",
              "type": "integer",
              "description": "The status of the plasma extractor can be (Stopped = 1, Running = 2, Jammed output full = 3, Jammed no output container = 4)"
            }
          ]
        },
        "onStopped": {
          "description": "Emitted when the plasma extractor stopped the extraction process"
        }
      }
    },
    "Player": {
      "methods": {
        "getName": {
          "description": "Returns the player name",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The player name"
            }
          ],
          "isMethodStatic": true
        },
        "getId": {
          "description": "Return the ID of the player",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The ID of the player"
            }
          ],
          "isMethodStatic": true
        },
        "getMass": {
          "description": "Returns the player mass",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The mass of the player in kilograms"
            }
          ],
          "isMethodStatic": true
        },
        "getNanopackMass": {
          "description": "Returns the player's nanopack content mass",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The player's nanopack content mass in kilograms"
            }
          ],
          "isMethodStatic": true
        },
        "getNanopackVolume": {
          "description": "Returns the player's nanopack content volume",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The player's nanopack content volume in liters"
            }
          ],
          "isMethodStatic": true
        },
        "getNanopackMaxVolume": {
          "description": "Returns the player's nanopack maximum volume",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The player's nanopack maximum volume in liters"
            }
          ],
          "isMethodStatic": true
        },
        "getOrgIds": {
          "description": "Returns the list of organization IDs of the player",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The list of organization IDs"
            }
          ],
          "isMethodStatic": true
        },
        "getPosition": {
          "description": "Returns the position of the player, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The position in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldPosition": {
          "description": "Returns the position of the player, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The position in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getHeadPosition": {
          "description": "Returns the position of the head of the player's character, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The position of the head in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldHeadPosition": {
          "description": "Returns the position of the head of the player's character, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The position of the head in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getVelocity": {
          "description": "Returns the velocity vector of the player, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The velocity vector in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldVelocity": {
          "description": "Returns the velocity vector of the player, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The velocity vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getAbsoluteVelocity": {
          "description": "Returns the absolute velocity vector of the player, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The velocity absolute vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getForward": {
          "description": "Returns the forward direction vector of the player, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The forward direction vector in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getRight": {
          "description": "Returns the right direction vector of the player, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The right direction vector in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getUp": {
          "description": "Returns the up direction vector of the player, in construct local coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The up direction vector in construct local coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldForward": {
          "description": "Returns the forward direction vector of the player, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The forward direction vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldRight": {
          "description": "Returns the right direction vector of the player, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The right direction vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getWorldUp": {
          "description": "Returns the up direction vector of the player, in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The up direction vector in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getPlanet": {
          "description": "Returns the id of the planet the player is located on",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The id of the planet, 0 if none"
            }
          ],
          "isMethodStatic": true
        },
        "getParent": {
          "description": "Returns the identifier of the construct to which the player is parented",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The id of the construct, 0 if none"
            }
          ],
          "isMethodStatic": true
        },
        "isSeated": {
          "description": "Checks if the player is seated",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the player is seated, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getSeatId": {
          "description": "Returns the local id of the seat on which the player is sitting",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The local id of the seat, or 0 is not seated"
            }
          ],
          "isMethodStatic": true
        },
        "isParentedTo": {
          "description": "Checks if the player is parented to the given construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The construct id"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the player is parented to the given construct, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isSprinting": {
          "description": "Checks if the player is currently sprinting",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the player is sprinting, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isJetpackOn": {
          "description": "Checks if the player's jetpack is on",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the player's jetpack is on, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isHeadlightOn": {
          "description": "Returns the state of the headlight of the player",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the player has his headlight on, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "setHeadlightOn": {
          "description": "Set the state of the headlight of the player",
          "params": [
            {
              "name": "state",
              "type": "boolean",
              "description": "True to turn on headlight"
            }
          ],
          "isMethodStatic": true
        },
        "freeze": {
          "description": "Freezes the player movements, liberating the associated movement keys to be used by the script.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal)",
          "params": [
            {
              "name": "state",
              "type": "boolean",
              "description": "True to freeze the player, false to unfreeze"
            }
          ],
          "isMethodStatic": true
        },
        "isFrozen": {
          "description": "Checks if the player movements are frozen",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the player is frozen, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "hasDRMAutorization": {
          "description": "Checks if the player has DRM autorization to the control unit",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the player has DRM autorization on the control unit, false otherwise"
            }
          ],
          "isMethodStatic": true
        }
      },
      "events": {
        "onParentChanged": {
          "description": "Emitted when the player parent change",
          "params": [
            {
              "name": "oldId",
              "type": "integer",
              "description": "The previous parent construct ID"
            },
            {
              "name": "newId",
              "type": "integer",
              "description": "The new parent construct ID"
            }
          ]
        }
      }
    },
    "PressureTile": {
      "parent": "Element",
      "events": {
        "onPressed": {
          "description": "Emitted when the pressure tile is pressed"
        },
        "pressed": {},
        "onReleased": {
          "description": "Emitter when the pressure tile is released"
        },
        "released": {}
      },
      "methods": {
        "isDown": {
          "description": "Checks if the pressure tile is down",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True when the tile is down, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "PressureTile.getState() is deprecated, use PressureTile.isDown() instead.",
          "isMethodStatic": true
        }
      }
    },
    "Radar": {
      "parent": "Element",
      "methods": {
        "getOperationalState": {
          "description": "Checks if the radar is operational",
          "returns": [
            {
              "type": "integer",
              "name": "state",
              "description": "1 if the radar is operational, otherwise: 0 = broken, -1 = bad environment, -2 = obstructed, -3 = already in use"
            }
          ],
          "isMethodStatic": true
        },
        "isOperational": {
          "deprecated": true,
          "description": "Radar.isOperational() is deprecated, use Radar.getOperationalState() instead.",
          "isMethodStatic": true
        },
        "getRange": {
          "description": "Returns the scan range of the radar",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The scan range"
            }
          ],
          "isMethodStatic": true
        },
        "getIdentifyRanges": {
          "description": "Returns ranges to identify a target based on its core size",
          "returns": [
            {
              "type": "table",
              "name": "ranges",
              "description": "The list of float values for ranges in meters as { xsRange, sRange, mRange, lRange }"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructIds": {
          "description": "Returns the list of construct IDs in the scan range",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The list of scanned construct IDs"
            }
          ],
          "isMethodStatic": true
        },
        "getSortMethod": {
          "description": "Returns the sort method for construct data",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The sort method (Distance Ascending = 1, Distance Descending = 2, Size Ascending = 3, Size Descending = 4, Threat Ascending = 5, Threat Descending = 6)"
            }
          ],
          "isMethodStatic": true
        },
        "setSortMethod": {
          "description": "Sets the sort method for construct data",
          "params": [
            {
              "name": "method",
              "type": "integer",
              "description": "The sort method (Distance Ascending = 1, Distance Descending = 2, Size Ascending = 3, Size Descending = 4, Threat Ascending = 5, Threat Descending = 6)"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the sort method was set successfully, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getIdentifiedConstructIds": {
          "description": "Returns the list of identified construct IDs",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The list of identified construct IDs"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructs": {
          "description": "Returns the list of constructs in a given range according to the current sort method",
          "params": [
            {
              "name": "offset",
              "type": "integer",
              "description": "Offset from the first entry"
            },
            {
              "name": "size",
              "type": "integer",
              "description": "Total entries to return following the offset, 0 to return all entries"
            },
            {
              "name": "filter",
              "type": "table",
              "description": "(optional) The filters to be applied as a table {[bool] isMatching, [int] constructKind, [string] coreSize, [bool] isAbandoned}"
            },
            {
              "name": "isMatching",
              "type": "boolean",
              "description": "(optional) True to filter out constructs with a matching transponder, false otherwise"
            },
            {
              "name": "constructKind",
              "type": "integer",
              "description": "(optional) The construct kind id to filter out constructs (Universe = 1, Planet = 2, Asteroid = 3, Static = 4, Dynamic = 5, Space = 6, Alien = 7)"
            },
            {
              "name": "coreSize",
              "type": "string",
              "description": "(optional) The construct core unit size to filter out constructs ('XS', 'S', 'M', 'L', 'XL')"
            },
            {
              "name": "isAbandoned",
              "type": "boolean",
              "description": "(optional) True to filter out abandoned constructs, false otherwise"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The list of constructs tables {[integer] constructId, [string] name, [string] size, [string] constructType, [number] mass, [int] isIdentified, [int] inIdentifyRange, [number] identificationDuration, [number] remainingIdentificationTime, [int] myThreatStateToTarget, [int] targetThreatState, [number] distance, [table] worldPosition, [number] speed, [number] radialSpeed, [number] angularSpeed, [table] info}"
            }
          ],
          "isMethodStatic": true
        },
        "getTargetId": {
          "description": "Returns the ID of the target construct",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The ID of the target construct"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructDistance": {
          "description": "Returns the distance to the given construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The distance between the current and target construct center"
            }
          ],
          "isMethodStatic": true
        },
        "isConstructIdentified": {
          "description": "Returns 1 if the given construct is identified",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the construct is identified, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isConstructAbandoned": {
          "description": "Returns 1 if the given construct was abandoned",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the construct has no owner, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructCoreSize": {
          "description": "Returns the core size of the given construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "size",
              "description": "The core size name; can be 'XS', 'S', 'M', 'L', 'XL'"
            }
          ],
          "isMethodStatic": true
        },
        "getThreatRateTo": {
          "description": "Returns the threat rate your construct is for the given construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "threat",
              "description": "The threat rate index (None = 1, Identified = 2, Threatened and identified = 3, Threatened = 4, Attacked = 5), can be -1 if the radar is not operational"
            }
          ],
          "isMethodStatic": true
        },
        "getThreatTo": {
          "deprecated": true,
          "description": "Radar.getThreatTo(id) is deprecated, use Radar.getThreatRateTo(id) instead.",
          "isMethodStatic": true
        },
        "getThreatRateFrom": {
          "description": "Returns the threat rate the given construct is for your construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "threat",
              "description": "The threat rate index (None = 1, Identified = 2, Threatened and identified = 3, Threatened = 4, Attacked = 5), can be -1 if the radar is not operational"
            }
          ],
          "isMethodStatic": true
        },
        "getThreatFrom": {
          "deprecated": true,
          "description": "Radar.getThreatFrom(id) is deprecated, use Radar.getThreatRateFrom(id) instead.",
          "isMethodStatic": true
        },
        "hasMatchingTransponder": {
          "description": "Returns whether the target has an active Transponder with matching tags",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if your Construct and the target have active Transponders with at least one matching tag, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructOwnerEntity": {
          "description": "Returns a table with id of the owner entity (player or organization) of the given construct, if in range and if active transponder tags match for owned dynamic constructs.",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "entity",
              "description": "A table with fields {[int] id, [bool] isOrganization} describing the owner. Use system.getPlayerName(id) and system.getOrganization(id) to retrieve info about it"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructOwner": {
          "deprecated": true,
          "description": "Radar.getConstructOwner(id) is deprecated, use Radar.getConstructOwnerEntity(id) instead.",
          "isMethodStatic": true
        },
        "getConstructSize": {
          "description": "Return the size of the bounding box of the given construct, if in range",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The size of the construct in xyz-coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructKind": {
          "description": "Return the kind of the given construct",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "kind",
              "description": "The kind index of the construct (Universe = 1, Planet = 2, Asteroid = 3, Static = 4, Dynamic = 5, Space = 6, Alien = 7)"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructType": {
          "deprecated": true,
          "description": "Radar.getConstructType(id) is deprecated, use Radar.getConstructKind(id) instead.",
          "isMethodStatic": true
        },
        "getConstructPos": {
          "description": "Returns the position of the given construct in construct local coordinates, if active transponder tags match for owned dynamic constructs",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The position of the construct center in local construct coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructWorldPos": {
          "description": "Returns the position of the given construct in world coordinates, if in range and if active transponder tags match for owned dynamic constructs",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The position of the construct center in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructVelocity": {
          "description": "Returns the velocity vector of the given construct in construct local coordinates, if identified and if active transponder tags match for owned dynamic constructs",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The velocity of the construct in local construct coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructWorldVelocity": {
          "description": "Returns the velocity vector of the given construct in world coordinates, if identified and if active transponder tags match for owned dynamic constructs",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The velocity of the construct in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructMass": {
          "description": "Returns the mass of the given construct, if identified for owned dynamic constructs",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The mass of the construct in kilograms"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructName": {
          "description": "Return the name of the given construct, if defined",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The name of the construct"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructInfos": {
          "description": "Returns a table of working elements on the given construction, if identified for owned dynamic constructs",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "info",
              "description": "A table with fields : {[float] weapons, [float] radars, [float] antiGravity, [float] atmoEngines, [float] spaceEngines, [float] rocketEngines} with values between 0.0 and 1.0. Exceptionally antiGravity and rocketEngines are always 1.0 if present, even if broken"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructSpeed": {
          "description": "Returns the speed of the given construct, if identified for owned dynamic constructs",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "speed",
              "description": "The speed of the construct relative to the universe in meters per second"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructAngularSpeed": {
          "description": "Returns the angular speed of the given construct to your construct, if identified for owned dynamic constructs",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "speed",
              "description": "The angular speed of the construct relative to our construct in radians per second"
            }
          ],
          "isMethodStatic": true
        },
        "getConstructRadialSpeed": {
          "description": "Returns the radial speed of the given construct to your construct, if identified for owned dynamic constructs",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "speed",
              "description": "The radial speed of the construct relative to our construct in meters per second"
            }
          ],
          "isMethodStatic": true
        }
      },
      "events": {
        "onEnter": {
          "description": "Emitted when a Construct enters the scan range of the radar",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ]
        },
        "enter": {},
        "onLeave": {
          "description": "Emitted when a construct leaves the range of the radar",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ]
        },
        "leave": {},
        "onIdentified": {
          "description": "Emitted when a construct is identified",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the construct"
            }
          ]
        }
      }
    },
    "Receiver": {
      "parent": "Element",
      "events": {
        "onReceived": {
          "description": "Emitted when a message is received on any channel defined on the element",
          "params": [
            {
              "name": "channel",
              "type": "string",
              "description": "The channel; can be used as a filter"
            },
            {
              "name": "message",
              "type": "string",
              "description": "The message received"
            }
          ]
        },
        "receive": {}
      },
      "methods": {
        "getRange": {
          "description": "Returns the receiver range",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The range in metres"
            }
          ],
          "isMethodStatic": true
        },
        "hasChannel": {
          "description": "Checks if the given channel exists in the receiver channels list",
          "params": [
            {
              "name": "channel",
              "type": "string",
              "description": "The channels list as Lua table"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the channels list contains the given channel, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "setChannelList": {
          "description": "Set the channels list",
          "params": [
            {
              "name": "channels",
              "type": "table",
              "description": "The channels list as Lua table"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if the channels list has been successfully set, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "setChannels": {
          "deprecated": true,
          "description": "Receiver.setChannels(channels) is deprecated, use Receiver.setChannelList(channels) instead.",
          "isMethodStatic": true
        },
        "getChannelList": {
          "description": "Returns the channels list",
          "returns": [
            {
              "type": "table",
              "name": "channels",
              "description": "The channels list as Lua table"
            }
          ],
          "isMethodStatic": true
        },
        "getChannels": {
          "deprecated": true,
          "description": "Receiver.getChannels() is deprecated, use Receiver.getChannelList() instead.",
          "isMethodStatic": true
        }
      }
    },
    "RenderScript": {
      "methods": {
        "addBezier": {
          "description": "Add a quadratic bezier curve to the given layer.\nSupported properties: shadow, strokeColor, strokeWidth",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The id of the layer to which to add"
            },
            {
              "name": "x1",
              "type": "number",
              "description": "X coordinate of the first point of the curve (the starting point)"
            },
            {
              "name": "y1",
              "type": "number",
              "description": "Y coordinate of the first point of the curve (the starting point)"
            },
            {
              "name": "x2",
              "type": "number",
              "description": "X coordinate of the second point of the curve (the control point)"
            },
            {
              "name": "y2",
              "type": "number",
              "description": "Y coordinate of the second point of the curve (the control point)"
            },
            {
              "name": "x3",
              "type": "number",
              "description": "X coordinate of the third point of the curve (the ending point)"
            },
            {
              "name": "y3",
              "type": "number",
              "description": "Y coordinate of the third point of the curve (the ending point)"
            }
          ],
          "isMethodStatic": true
        },
        "addBox": {
          "description": "Add a box to the given layer.\nSupported properties: fillColor, rotation, shadow, strokeColor, strokeWidth",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The id of the layer to which to add"
            },
            {
              "name": "x",
              "type": "number",
              "description": "X coordinate of the box's top-left corner"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y coordinate of the box's top-left corner"
            },
            {
              "name": "sx",
              "type": "number",
              "description": "Width of the box"
            },
            {
              "name": "sy",
              "type": "number",
              "description": "Height of the box"
            }
          ],
          "isMethodStatic": true
        },
        "addBoxRounded": {
          "description": "Add a rounded box to the given layer.\nSupported properties: fillColor, rotation, shadow, strokeColor, strokeWidth",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The id of the layer to which to add"
            },
            {
              "name": "x",
              "type": "number",
              "description": "X coordinate of the box's top-left corner"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y coordinate of the box's top-left corner"
            },
            {
              "name": "sx",
              "type": "number",
              "description": "Width of the box"
            },
            {
              "name": "sy",
              "type": "number",
              "description": "Height of the box"
            },
            {
              "name": "r",
              "type": "number",
              "description": "Rounding radius of the box"
            }
          ],
          "isMethodStatic": true
        },
        "addCircle": {
          "description": "Add a circle to the given layer.\nSupported properties: fillColor, shadow, strokeColor, strokeWidth",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The id of the layer to which to add"
            },
            {
              "name": "x",
              "type": "number",
              "description": "X coordinate of the circle's center"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y coordinate of the circle's center"
            },
            {
              "name": "r",
              "type": "number",
              "description": "Radius of the circle"
            }
          ],
          "isMethodStatic": true
        },
        "addImage": {
          "description": "Add an image to the given layer.\nSupported properties: fillColor, rotation",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The id of the layer to which to add"
            },
            {
              "name": "image",
              "type": "integer",
              "description": "The id of the image to add"
            },
            {
              "name": "x",
              "type": "number",
              "description": "X coordinate of the image's top-left corner"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y coordinate of the image's top-left corner"
            },
            {
              "name": "sx",
              "type": "number",
              "description": "Width of the image"
            },
            {
              "name": "sy",
              "type": "number",
              "description": "Height of the image"
            }
          ],
          "isMethodStatic": true
        },
        "addImageSub": {
          "description": "Add a sub-region of an image to the given layer.\nSupported properties: fillColor, rotation",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The id of the layer to which to add"
            },
            {
              "name": "image",
              "type": "integer",
              "description": "The id of the image to add"
            },
            {
              "name": "x",
              "type": "number",
              "description": "X coordinate of the image's top-left corner"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y coordinate of the image's top-left corner"
            },
            {
              "name": "sx",
              "type": "number",
              "description": "Width of the image"
            },
            {
              "name": "sy",
              "type": "number",
              "description": "Height of the image"
            },
            {
              "name": "subX",
              "type": "number",
              "description": "X coordinate of the top-left corner of the sub-region to draw"
            },
            {
              "name": "subY",
              "type": "number",
              "description": "Y coordinate of the top-left corner of the sub-region to draw"
            },
            {
              "name": "subSx",
              "type": "number",
              "description": "Width of the sub-region within the image to draw"
            },
            {
              "name": "subSy",
              "type": "number",
              "description": "Height of the sub-region within the image to draw"
            }
          ],
          "isMethodStatic": true
        },
        "addLine": {
          "description": "Add a line to the given layer.\nSupported properties: rotation, shadow, strokeColor, strokeWidth",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The id of the layer to which to add"
            },
            {
              "name": "x1",
              "type": "number",
              "description": "X coordinate of the start of the line"
            },
            {
              "name": "y1",
              "type": "number",
              "description": "Y coordinate of the start of the line"
            },
            {
              "name": "x2",
              "type": "number",
              "description": "X coordinate of the end of the line"
            },
            {
              "name": "y2",
              "type": "number",
              "description": "Y coordinate of the end of the line"
            }
          ],
          "isMethodStatic": true
        },
        "addQuad": {
          "description": "Add a quadrilateral to the given layer.\nSupported properties: fillColor, rotation, shadow, strokeColor, strokeWidth",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The id of the layer to which to add"
            },
            {
              "name": "x1",
              "type": "number",
              "description": "X coordinate of the first point of the quad"
            },
            {
              "name": "y1",
              "type": "number",
              "description": "Y coordinate of the first point of the quad"
            },
            {
              "name": "x2",
              "type": "number",
              "description": "X coordinate of the second point of the quad"
            },
            {
              "name": "y2",
              "type": "number",
              "description": "Y coordinate of the second point of the quad"
            },
            {
              "name": "x3",
              "type": "number",
              "description": "X coordinate of the third point of the quad"
            },
            {
              "name": "y3",
              "type": "number",
              "description": "Y coordinate of the third point of the quad"
            },
            {
              "name": "x4",
              "type": "number",
              "description": "X coordinate of the fourth point of the quad"
            },
            {
              "name": "y4",
              "type": "number",
              "description": "Y coordinate of the fourth point of the quad"
            }
          ],
          "isMethodStatic": true
        },
        "addText": {
          "description": "Add a string of text to the given layer.\nSee setNextTextAlign for information on controlling text anchoring.\nSupported properties: fillColor, shadow, strokeColor, strokeWidth",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The id of the layer to which to add"
            },
            {
              "name": "font",
              "type": "integer",
              "description": "The id of the font to use"
            },
            {
              "name": "text",
              "type": "string",
              "description": "The string of text to be added"
            },
            {
              "name": "x",
              "type": "number",
              "description": "X coordinate of the text anchor"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y coordinate of the text anchor"
            }
          ],
          "isMethodStatic": true
        },
        "addTriangle": {
          "description": "Add a triangle to the given layer.\nSupported properties: fillColor, rotation, shadow, strokeColor, strokeWidth",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The id of the layer to which to add"
            },
            {
              "name": "x1",
              "type": "number",
              "description": "X coordinate of the first point of the triangle"
            },
            {
              "name": "y1",
              "type": "number",
              "description": "Y coordinate of the first point of the triangle"
            },
            {
              "name": "x2",
              "type": "number",
              "description": "X coordinate of the second point of the triangle"
            },
            {
              "name": "y2",
              "type": "number",
              "description": "Y coordinate of the second point of the triangle"
            },
            {
              "name": "x3",
              "type": "number",
              "description": "X coordinate of the third point of the triangle"
            },
            {
              "name": "y3",
              "type": "number",
              "description": "Y coordinate of the third point of the triangle"
            }
          ],
          "isMethodStatic": true
        },
        "createLayer": {
          "description": "Create a new layer that will be rendered on top of all previously-created layers",
          "returns": [
            {
              "type": "integer",
              "name": "index",
              "description": "The id that can be used to uniquely identify the layer for use with other API functions"
            }
          ],
          "isMethodStatic": true
        },
        "getAvailableFontCount": {
          "description": "Return the number of fonts available to be used by render script",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The total number of fonts available"
            }
          ],
          "isMethodStatic": true
        },
        "getAvailableFontName": {
          "description": "Return the name of the nth available font",
          "params": [
            {
              "name": "index",
              "type": "integer",
              "description": "A number between 1 and the return value of getAvailableFontCount"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The name of the font, which can be used with the loadFont function"
            }
          ],
          "isMethodStatic": true
        },
        "getCursor": {
          "description": "Return the screen location that is currently raycasted by the player",
          "returns": [
            {
              "type": "number",
              "name": "x,",
              "description": "number y A tuple containing the (x, y) coordinates of the cursor, or (-1, -1) if the screen is not currently raycasted"
            }
          ],
          "isMethodStatic": true
        },
        "getCursorDown": {
          "description": "Return the status of the mouse button",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the mouse cursor is currently pressed down on the screen, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getCursorPressed": {
          "description": "Return the status of the mouse button",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the mouse cursor has been pressed down on the screen at any time since the last script execution, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getCursorReleased": {
          "description": "Return the status of the mouse button",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the mouse cursor has been released on the screen at any time since the last script execution, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getDeltaTime": {
          "description": "Return the time, in seconds, since the screen was last updated.\nUseful for creating timing-based animations. Since screens are not guaranteed to be updated at any specific\ntime interval it is more reliable to update animations based on this timer than based on a frame counter.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Time, in seconds, since the last screen update"
            }
          ],
          "isMethodStatic": true
        },
        "getFontMetrics": {
          "description": "Return informational metrics of a font\nCan be used for advanced text layout, although setNextTextAlign is all that is needed in most use cases.",
          "params": [
            {
              "name": "font",
              "type": "integer",
              "description": "The font to query"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "ascender,",
              "description": "number descender A tuple containing the maximal ascender and descender, respectively, of the given font"
            }
          ],
          "isMethodStatic": true
        },
        "getFontSize": {
          "description": "Return the currently-set size for the given font",
          "params": [
            {
              "name": "font",
              "type": "integer",
              "description": "The font to query"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The font size in vertical pixels"
            }
          ],
          "isMethodStatic": true
        },
        "getImageSize": {
          "description": "Return the width and height of an image.",
          "params": [
            {
              "name": "image",
              "type": "integer",
              "description": "The image to query"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "width,",
              "description": "number height A tuple containing the width and height, respectively, of the image, or (0, 0) if the image is not yet loaded"
            }
          ],
          "isMethodStatic": true
        },
        "getInput": {
          "description": "Return the screen's current input string",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The input string, as set by the screen unit API function setScriptInput, or an empty string if there is no current input"
            }
          ],
          "isMethodStatic": true
        },
        "getLocale": {
          "description": "Return the locale in which the game is currently running",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The locale, currently one of \"en-US\", \"fr-FR\", or \"de-DE\""
            }
          ],
          "isMethodStatic": true
        },
        "getRenderCost": {
          "description": "Return the current render cost of the script",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The cost of all rendering operations performed by the render script so far (at the time of the call to this function)"
            }
          ],
          "isMethodStatic": true
        },
        "getRenderCostMax": {
          "description": "Return the current render cost limit",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The render cost limit. A script that exceeds this limit (in one execution) will not render correctly and will instead throw an error. Note that this value may change between version releases"
            }
          ],
          "isMethodStatic": true
        },
        "getResolution": {
          "description": "Return the screen's current resolution.\nIdeally, your render scripts should be written to adapt to the resolution, as it may change in the future",
          "returns": [
            {
              "type": "integer",
              "name": "width,",
              "description": "integer height A tuple containing the (width, height) of the screen's render surface, in pixels"
            }
          ],
          "isMethodStatic": true
        },
        "getTextBounds": {
          "description": "Compute and return the bounding box of a text string rendered with a specific font",
          "params": [
            {
              "name": "font",
              "type": "integer",
              "description": "The font with which to render"
            },
            {
              "name": "text",
              "type": "string",
              "description": "The text string to render"
            }
          ],
          "returns": [
            {
              "type": "number",
              "name": "width,",
              "description": "number height A tuple containing the width and height, respectively, of the bounding box"
            }
          ],
          "isMethodStatic": true
        },
        "getTime": {
          "description": "Return the time, in seconds, relative to the first execution",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Time, in seconds, since the render script started running"
            }
          ],
          "isMethodStatic": true
        },
        "isImageLoaded": {
          "description": "Return the load status of an image.\nNote that render scripts will still render even when not all images are loaded (the call to addImage will\nsilently fail). You can use this function to do something else instead, such as draw a placeholder or\nloading bar while images load",
          "params": [
            {
              "name": "image",
              "type": "integer",
              "description": "The image to query"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the image is fully loaded and ready to use, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "loadImage": {
          "description": "Load an image to be used with addImage from the given URL",
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "The URL of the image to be loaded; Novaquark CDN restrictions apply as usual"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The id that can be used to uniquely identify the image for use with other API functions"
            }
          ],
          "isMethodStatic": true
        },
        "loadFont": {
          "description": "Load a font to be used with addText",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "The name of the font to load; see the font list section for available font names"
            },
            {
              "name": "size",
              "type": "integer",
              "description": "The size, in vertical pixels, at which the font will render. Note that this size can be changed during script execution with the setFontSize function"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The id that can be used to uniquely identify the font for use with other API functions"
            }
          ],
          "isMethodStatic": true
        },
        "logMessage": {
          "description": "Log a message for debugging purposes. If the \"enable output in Lua channel\" box is\nchecked on the editor panel for the given screen, the message will be displayed in the Lua channel,\notherwise, this function does nothing. The checkbox is off by default, so you must explicitly enable this on\na screen to see debug output",
          "params": [
            {
              "name": "message",
              "type": "string",
              "description": "The message to log, as a string"
            }
          ],
          "isMethodStatic": true
        },
        "requestAnimationFrame": {
          "description": "Request that this screen should be redrawn in a certain number of frames.\nA screen that requires highly-fluid animations should call requestAnimationFrame(1) before it returns.\nUsage of this function has a significant performance impact on the screen unit system, so scripts should\ntry to request updates as infrequently as possible.\nA screen with unchanging (static) contents should not call this function at all.",
          "params": [
            {
              "name": "frames",
              "type": "integer",
              "description": "The (approximate) number of frames after which the render script will run again and the screen will be redrawn"
            }
          ],
          "isMethodStatic": true
        },
        "setBackgroundColor": {
          "description": "Set the background color of the screen",
          "params": [
            {
              "name": "r",
              "type": "number",
              "description": "Red component, between 0 and 1"
            },
            {
              "name": "g",
              "type": "number",
              "description": "Green component, between 0 and 1"
            },
            {
              "name": "b",
              "type": "number",
              "description": "Blue component, between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "setDefaultFillColor": {
          "description": "Set the default fill color for all subsequent shapes of the given type added to the given layer",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the default will be set"
            },
            {
              "name": "shapeType",
              "type": "ShapeType",
              "description": "The type of shape to which the default will apply"
            },
            {
              "name": "r",
              "type": "number",
              "description": "Red component, between 0 and 1"
            },
            {
              "name": "g",
              "type": "number",
              "description": "Green component, between 0 and 1"
            },
            {
              "name": "b",
              "type": "number",
              "description": "Blue component, between 0 and 1"
            },
            {
              "name": "a",
              "type": "number",
              "description": "Alpha component, between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "setDefaultRotation": {
          "description": "Set the default rotation for all subsequent shapes of the given type added to the given layer",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the default will be set"
            },
            {
              "name": "shapeType",
              "type": "ShapeType",
              "description": "The type of shape to which the default will apply"
            },
            {
              "name": "rotation",
              "type": "number",
              "description": "Rotation, in radians; positive is counter-clockwise, negative is clockwise"
            }
          ],
          "isMethodStatic": true
        },
        "setDefaultShadow": {
          "description": "Set the default shadow for all subsequent shapes of the given type added to the given layer",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the default will be set"
            },
            {
              "name": "shapeType",
              "type": "ShapeType",
              "description": "The type of shape to which the default will apply"
            },
            {
              "name": "radius",
              "type": "number",
              "description": "The distance that the shadow extends from the shape's border"
            },
            {
              "name": "r",
              "type": "number",
              "description": "Red component, between 0 and 1"
            },
            {
              "name": "g",
              "type": "number",
              "description": "Green component, between 0 and 1"
            },
            {
              "name": "b",
              "type": "number",
              "description": "Blue component, between 0 and 1"
            },
            {
              "name": "a",
              "type": "number",
              "description": "Alpha component, between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "setDefaultStrokeColor": {
          "description": "Set the default stroke color for all subsequent shapes of the given type added to the given layer",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the default will be set"
            },
            {
              "name": "shapeType",
              "type": "ShapeType",
              "description": "The type of shape to which the default will apply"
            },
            {
              "name": "r",
              "type": "number",
              "description": "Red component, between 0 and 1"
            },
            {
              "name": "g",
              "type": "number",
              "description": "Green component, between 0 and 1"
            },
            {
              "name": "b",
              "type": "number",
              "description": "Blue component, between 0 and 1"
            },
            {
              "name": "a",
              "type": "number",
              "description": "Alpha component, between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "setDefaultStrokeWidth": {
          "description": "Set the default stroke width for all subsequent shapes of the given type added to the given layer",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the default will be set"
            },
            {
              "name": "shapeType",
              "type": "ShapeType",
              "description": "The type of shape to which the default will apply"
            },
            {
              "name": "strokeWidth",
              "type": "number",
              "description": "Stroke width, in pixels"
            }
          ],
          "isMethodStatic": true
        },
        "setDefaultTextAlign": {
          "description": "Set the default text alignment of all subsequent text strings on the given layer",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the default will be set"
            },
            {
              "name": "alignH",
              "type": "AlignH",
              "description": "Specifies the horizontal anchoring of a text string relative to the draw coordinates; must be one of the following built-in constants: AlignH_Left, AlignH_Center, AlignH_Right"
            },
            {
              "name": "alignV",
              "type": "AlignV",
              "description": "Specifies the vertical anchoring of a text string relative to the draw coordinates; must be one of the following built-in constants: AlignV_Ascender, AlignV_Top, AlignV_Middle, AlignV_Baseline, AlignV_Bottom, AlignV_Descender"
            }
          ],
          "isMethodStatic": true
        },
        "setFontSize": {
          "description": "Set the size at which a font will render.\nImpacts all subsequent font-related calls, including addText, getFontMetrics, and getTextBounds.",
          "params": [
            {
              "name": "font",
              "type": "integer",
              "description": "The font for which the size will be set"
            },
            {
              "name": "size",
              "type": "integer",
              "description": "The new size, in vertical pixels, at which the font will render"
            }
          ],
          "isMethodStatic": true
        },
        "setLayerClipRect": {
          "description": "Set a clipping rectangle applied to the layer as a whole.\nLayer contents that fall outside the clipping rectangle will not be rendered, and those that are\npartially within the rectangle will be 'clipped' against it. The clipping rectangle is applied\nbefore layer transformations. Note that clipped contents still count toward the render cost.",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the clipping rectangle will be set"
            },
            {
              "name": "x",
              "type": "number",
              "description": "X coordinate of the clipping rectangle's top-left corner"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y coordinate of the clipping rectangle's top-left corner"
            },
            {
              "name": "sx",
              "type": "number",
              "description": "Width of the clipping rectangle"
            },
            {
              "name": "sy",
              "type": "number",
              "description": "Height of the clipping rectangle"
            }
          ],
          "isMethodStatic": true
        },
        "setLayerOrigin": {
          "description": "Set the transform origin of a layer; layer scaling and rotation are applied relative to this origin",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the origin will be set"
            },
            {
              "name": "x",
              "type": "number",
              "description": "X coordinate of the layer's transform origin"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y coordinate of the layer's transform origin"
            }
          ],
          "isMethodStatic": true
        },
        "setLayerRotation": {
          "description": "Set a rotation applied to the layer as a whole, relative to the layer's transform origin",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the rotation will be set"
            },
            {
              "name": "rotation",
              "type": "number",
              "description": "Rotation, in radians; positive is counter-clockwise, negative is clockwise"
            }
          ],
          "isMethodStatic": true
        },
        "setLayerScale": {
          "description": "Set a scale factor applied to the layer as a whole, relative to the layer's transform origin.\nScale factors are multiplicative, so that a scale >1 enlarges the size of the layer, 1.0 does nothing, and\n<1 reduces the size of the layer.",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the scale factor will be set"
            },
            {
              "name": "sx",
              "type": "number",
              "description": "Scale factor along the X axis"
            },
            {
              "name": "sy",
              "type": "number",
              "description": "Scale factor along the Y axis"
            }
          ],
          "isMethodStatic": true
        },
        "setLayerTranslation": {
          "description": "Set a translation applied to the layer as a whole",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer for which the translation will be set"
            },
            {
              "name": "tx",
              "type": "number",
              "description": "Translation along the X axis"
            },
            {
              "name": "ty",
              "type": "number",
              "description": "Translation along the Y axis"
            }
          ],
          "isMethodStatic": true
        },
        "setNextFillColor": {
          "description": "Set the fill color of the next rendered shape on the given layer; has no effect on shapes that do not support a fill color",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer to which this property applies"
            },
            {
              "name": "r",
              "type": "number",
              "description": "Red component, between 0 and 1"
            },
            {
              "name": "g",
              "type": "number",
              "description": "Green component, between 0 and 1"
            },
            {
              "name": "b",
              "type": "number",
              "description": "Blue component, between 0 and 1"
            },
            {
              "name": "a",
              "type": "number",
              "description": "Alpha component, between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "setNextRotation": {
          "description": "Set the rotation of the next rendered shape on the given layer; has no effect on shapes that do not support rotation",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer to which this property applies"
            },
            {
              "name": "rotation",
              "type": "number",
              "description": "Rotation, in radians; positive is counter-clockwise, negative is clockwise"
            }
          ],
          "isMethodStatic": true
        },
        "setNextRotationDegrees": {
          "description": "Set the rotation of the next rendered shape on the given layer; has no effect on shapes that do not support rotation",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer to which this property applies"
            },
            {
              "name": "rotation",
              "type": "number",
              "description": "Rotation, in degrees; positive is counter-clockwise, negative is clockwise"
            }
          ],
          "isMethodStatic": true
        },
        "setNextShadow": {
          "description": "Set the shadow of the next rendered shape on the given layer; has no effect on shapes that do not support a shadow",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer to which this property applies"
            },
            {
              "name": "radius",
              "type": "number",
              "description": "The distance that the shadow extends from the shape's border"
            },
            {
              "name": "r",
              "type": "number",
              "description": "Red component, between 0 and 1"
            },
            {
              "name": "g",
              "type": "number",
              "description": "Green component, between 0 and 1"
            },
            {
              "name": "b",
              "type": "number",
              "description": "Blue component, between 0 and 1"
            },
            {
              "name": "a",
              "type": "number",
              "description": "Alpha component, between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "setNextStrokeColor": {
          "description": "Set the stroke color of the next rendered shape on the given layer; has no effect on shapes that do not support a stroke color",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer to which this property applies"
            },
            {
              "name": "r",
              "type": "number",
              "description": "Red component, between 0 and 1"
            },
            {
              "name": "g",
              "type": "number",
              "description": "Green component, between 0 and 1"
            },
            {
              "name": "b",
              "type": "number",
              "description": "Blue component, between 0 and 1"
            },
            {
              "name": "a",
              "type": "number",
              "description": "Alpha component, between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "setNextStrokeWidth": {
          "description": "Set the stroke width of the next rendered shape on the given layer; has no effect on shapes that do not support a stroke width",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer to which this property applies"
            },
            {
              "name": "strokeWidth",
              "type": "number",
              "description": "Stroke width, in pixels"
            }
          ],
          "isMethodStatic": true
        },
        "setNextTextAlign": {
          "description": "Set the text alignment of the next rendered text string on the given layer.\nBy default, text is anchored horizontally on the left, and vertically on the baseline",
          "params": [
            {
              "name": "layer",
              "type": "integer",
              "description": "The layer to which this property applies"
            },
            {
              "name": "alignH",
              "type": "AlignH",
              "description": "Specifies the horizontal anchoring of a text string relative to the draw coordinates; must be one of the following built-in constants: AlignH_Left, AlignH_Center, AlignH_Right"
            },
            {
              "name": "alignV",
              "type": "AlignV",
              "description": "Specifies the vertical anchoring of a text string relative to the draw coordinates; must be one of the following built-in constants: AlignV_Ascender, AlignV_Top, AlignV_Middle, AlignV_Baseline, AlignV_Bottom, AlignV_Descender"
            }
          ],
          "isMethodStatic": true
        },
        "setOutput": {
          "description": "Set the script's output string, which can be retrieved via a programming board with the screen unit API function getScriptOutput",
          "params": [
            {
              "name": "output",
              "type": "string",
              "description": "The output string"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "RocketEngine": {
      "parent": "FueledEngine",
      "methods": {
        "getDistance": {
          "deprecated": true,
          "description": "RocketEngine.getDistance() is deprecated.",
          "isMethodStatic": true
        }
      }
    },
    "Screen": {
      "parent": "Element",
      "events": {
        "onMouseDown": {
          "description": "Emitted when the player starts a click on the screen",
          "params": [
            {
              "name": "x",
              "type": "number",
              "description": "X-coordinate of the click in percentage (between 0 and 1) of the screen width"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y-coordinate of the click in percentage (between 0 and 1) the screen height"
            }
          ]
        },
        "mouseDown": {},
        "onMouseUp": {
          "description": "Emitted when the player releases a click on the screen",
          "params": [
            {
              "name": "x",
              "type": "number",
              "description": "X-coordinate of the click in percentage (between 0 and 1) of the screen width"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y-coordinate of the click in percentage (between 0 and 1) the screen height"
            }
          ]
        },
        "mouseUp": {},
        "onOutputChanged": {
          "description": "Emitted when the output of the screen is changed",
          "params": [
            {
              "name": "output",
              "type": "string",
              "description": "The output string of the screen"
            }
          ]
        }
      },
      "methods": {
        "activate": {
          "description": "Switch on the screen",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Switch off the screen",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Checks if the screen is on",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the screen is on, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "Screen.getState() is deprecated, use Screen.isActive() instead.",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the state of the screen",
          "isMethodStatic": true
        },
        "addText": {
          "description": "Displays the given text at the given coordinates in the screen, and returns an ID to move it later",
          "params": [
            {
              "name": "x",
              "type": "number",
              "description": "Horizontal position, as a percentage (between 0 and 100) of the screen width"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Vertical position, as a percentage (between 0 and 100) of the screen height"
            },
            {
              "name": "fontSize",
              "type": "number",
              "description": "Text font size, as a percentage of the screen width"
            },
            {
              "name": "text",
              "type": "string",
              "description": "The text to display"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "index",
              "description": " An integer ID that can be used later to update/remove the added Element"
            }
          ],
          "isMethodStatic": true
        },
        "setCenteredText": {
          "description": "Displays the given text centered in the screen with a font to maximize its visibility",
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "The text to display"
            }
          ],
          "isMethodStatic": true
        },
        "setHTML": {
          "description": "Set the whole screen HTML content (overrides anything already set)",
          "params": [
            {
              "name": "html",
              "type": "string",
              "description": "The HTML content to display"
            }
          ],
          "isMethodStatic": true
        },
        "setRenderScript": {
          "description": "Set the screen render script, switching the screen to native rendering mode",
          "params": [
            {
              "name": "script",
              "type": "string",
              "description": "The Lua render script"
            }
          ],
          "isMethodStatic": true
        },
        "setScriptInput": {
          "description": "Defines the input of the screen rendering script, which will be automatically defined during the execution of Lua",
          "params": [
            {
              "name": "input",
              "type": "string",
              "description": "A string that can be retrieved by calling getInput in a render script"
            }
          ],
          "isMethodStatic": true
        },
        "clearScriptOutput": {
          "description": "Set the screen render script output to the empty string",
          "isMethodStatic": true
        },
        "getScriptOutput": {
          "description": "Get the screen render script output",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The contents of the last render script setOutput call, or an empty string"
            }
          ],
          "isMethodStatic": true
        },
        "addContent": {
          "description": "Displays the given HTML content at the given coordinates in the screen, and returns an ID to move it later",
          "params": [
            {
              "name": "x",
              "type": "number",
              "description": "Horizontal position, as a percentage (between 0 and 100) of the screen width"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Vertical position, as a percentage (between 0 and 100) of the screen height"
            },
            {
              "name": "html",
              "type": "string",
              "description": "The HTML content to display, which can contain SVG html elements to make drawings"
            }
          ],
          "returns": [
            {
              "type": "integer",
              "name": "index",
              "description": "An integer ID that can be used later to update/remove the added Element"
            }
          ],
          "isMethodStatic": true
        },
        "setSVG": {
          "description": "Displays SVG code (anything that fits within a <svg> section), which overrides any preexisting content",
          "params": [
            {
              "name": "svg",
              "type": "string",
              "description": "The SVG content to display, which fits inside a 1920x1080 canvas"
            }
          ],
          "isMethodStatic": true
        },
        "resetContent": {
          "description": "Update the html element with the given ID (returned by addContent) with a new HTML content",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "An integer ID that is used to identify the html element in the screen. Methods such as addContent return the ID that you can store to use later here"
            },
            {
              "name": "html",
              "type": "string",
              "description": "The HTML content to display, which can contain SVG html elements to make drawings"
            }
          ],
          "isMethodStatic": true
        },
        "deleteContent": {
          "description": "Delete the html element with the given ID (returned by addContent)",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "An integer ID that is used to identify the html element in the screen. Methods such as addContent return the id that you can store to use later here"
            }
          ],
          "isMethodStatic": true
        },
        "showContent": {
          "description": "Update the visibility of the html element with the given ID (returned by addContent)",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "An integer ID that is used to identify the html element in the screen. Methods such as addContent return the ID that you can store to use later here"
            },
            {
              "name": "state",
              "type": "boolean",
              "description": "true to show the content, false to hide"
            }
          ],
          "isMethodStatic": true
        },
        "moveContent": {
          "description": "Move the html element with the given id (returned by addContent) to a new position in the screen",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "An integer id that is used to identify the html element in the screen. Methods such as addContent return the ID that you can store to use later here"
            },
            {
              "name": "x",
              "type": "number",
              "description": "Horizontal position, as a percentage (between 0 and 100) of the screen width"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Vertical position, as a percentage (between 0 and 100) of the screen height"
            }
          ],
          "isMethodStatic": true
        },
        "getMouseX": {
          "description": "Returns the x-coordinate of the position point at in the screen",
          "returns": [
            {
              "type": "number",
              "name": "x",
              "description": "The x-position as a percentage (between 0 and 1) of screen width; -1 if nothing is point at"
            }
          ],
          "isMethodStatic": true
        },
        "getMouseY": {
          "description": "Returns the y-coordinate of the position point at in the screen",
          "returns": [
            {
              "type": "number",
              "name": "y",
              "description": "The y-position as a percentage (between 0 and 1) of screen height; -1 if nothing is point at"
            }
          ],
          "isMethodStatic": true
        },
        "getMouseState": {
          "description": "Returns the state of the mouse click",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the mouse is pressed, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "clear": {
          "description": "Clear the screen",
          "isMethodStatic": true
        }
      }
    },
    "ShieldGenerator": {
      "parent": "Element",
      "events": {
        "onToggled": {
          "description": "Emitted when we started or stopped the shield generator",
          "params": [
            {
              "name": "active",
              "type": "boolean",
              "description": "True if the element was activated, false otherwise"
            }
          ]
        },
        "toggled": {},
        "onAbsorbed": {
          "description": "Emitted when the shield absorbed incoming damage",
          "params": [
            {
              "name": "hitpoints",
              "type": "number",
              "description": "Damage the shield absorbed"
            },
            {
              "name": "rawHitpoints",
              "type": "number",
              "description": "Total damage without taking resistances into account"
            }
          ]
        },
        "absorbed": {},
        "onVenting": {
          "description": "Emitted when venting started, stopped or restored some hitpoints",
          "params": [
            {
              "name": "active",
              "type": "boolean",
              "description": "True when venting is active, false otherwise"
            },
            {
              "name": "restoredHitpoints",
              "type": "number",
              "description": "Hitpoints restored since the last venting step"
            }
          ]
        },
        "venting": {},
        "onDown": {
          "description": "Emitted when the shield hit points reached 0 due to damage"
        },
        "down": {},
        "onRestored": {
          "description": "Emitted when the shield hit points were fully restored"
        },
        "restored": {}
      },
      "methods": {
        "activate": {
          "description": "Activate the shield",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Deactivate the shield",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the state of the shield",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Returns the activation state of the shield",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True when the shield is active, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "ShieldGenerator.getState() is deprecated, use ShieldGenerator.isActive() instead.",
          "isMethodStatic": true
        },
        "getShieldHitpoints": {
          "description": "Returns the current hitpoints of the shield",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current hitpoints of the shield"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxShieldHitpoints": {
          "description": "Returns the maximal hitpoints of the shield",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximal hitpoints of the shield"
            }
          ],
          "isMethodStatic": true
        },
        "startVenting": {
          "description": "Activate shield venting to restore hit points",
          "returns": [
            {
              "type": "boolean",
              "name": "state",
              "description": "True if venting started, false if an error occurred"
            }
          ],
          "isMethodStatic": true
        },
        "stopVenting": {
          "description": "Stop shield venting",
          "returns": [
            {
              "type": "boolean",
              "name": "state",
              "description": "True if venting stopped, false if an error occurred"
            }
          ],
          "isMethodStatic": true
        },
        "isVenting": {
          "description": "Check whether venting is in progress",
          "returns": [
            {
              "type": "boolean",
              "name": "state",
              "description": "True if venting is ongoing, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getVentingCooldown": {
          "description": "Returns time after which venting is possible again",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Remaining seconds of the venting cooldown"
            }
          ],
          "isMethodStatic": true
        },
        "getVentingMaxCooldown": {
          "description": "Returns maximal cooldown between venting",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Maximal seconds of the venting cooldown"
            }
          ],
          "isMethodStatic": true
        },
        "getResistances": {
          "description": "Returns distribution of resistance pool over resistance types",
          "returns": [
            {
              "type": "table",
              "name": "resistances",
              "description": "Resistance to damage type {antimatter, electromagnetic, kinetic, thermic}"
            }
          ],
          "isMethodStatic": true
        },
        "setResistances": {
          "description": "Distribute the resistance pool according to damage type",
          "params": [
            {
              "name": "antimatter",
              "type": "number",
              "description": "Antimatter damage resistance"
            },
            {
              "name": "electromagnetic",
              "type": "number",
              "description": "Electromagnetic damage resistance"
            },
            {
              "name": "kinetic",
              "type": "number",
              "description": "Kinetic damage resistance"
            },
            {
              "name": "thermic",
              "type": "number",
              "description": "Thermic damage resistance"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if resistance was distributed, false if an error occurred"
            }
          ],
          "isMethodStatic": true
        },
        "getResistancesCooldown": {
          "description": "Returns time after which adjusting resistances is possible again",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Remaining time of the resistance cooldown in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getResistancesMaxCooldown": {
          "description": "Returns maximal cooldown between adjusting resistances",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximum time of the resistance cooldown in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getResistancesPool": {
          "description": "Returns total resistance pool that may be distributed",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Total pool of resistances"
            }
          ],
          "isMethodStatic": true
        },
        "getResistancesRemaining": {
          "description": "Returns the remaining amount of the resistance pool that can be distributed",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Remaining resistance pool"
            }
          ],
          "isMethodStatic": true
        },
        "getStressRatio": {
          "description": "Returns ratio per damage type of recent weapon impacts after applying resistance",
          "returns": [
            {
              "type": "table",
              "name": "stress",
              "description": "Stress ratio due to damage type {antimatter, electromagnetic, kinetic, thermic}"
            }
          ],
          "isMethodStatic": true
        },
        "getStressRatioRaw": {
          "description": "Returns ratio per damage type of recent weapon impacts without resistance",
          "returns": [
            {
              "type": "table",
              "name": "stress",
              "description": "Stress ratio due to damage type {antimatter, electromagnetic, kinetic, thermic}"
            }
          ],
          "isMethodStatic": true
        },
        "getStressHitpoints": {
          "description": "Returns stress, that is the total hitpoints of recent weapon impacts after applying resistance",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Total stress hitpoints due to recent weapon impacts"
            }
          ],
          "isMethodStatic": true
        },
        "getStressHitpointsRaw": {
          "description": "Returns stress, that is the total hitpoints of recent weapon impacts without resistance",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Total stress hitpoints due to recent weapon impacts"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "SpaceBrake": {
      "parent": "BrakeEngine"
    },
    "SpaceEngine": {
      "parent": "FueledEngine",
      "methods": {
        "getDistance": {
          "deprecated": true,
          "description": "SpaceEngine.getDistance() is deprecated.",
          "isMethodStatic": true
        }
      }
    },
    "SpaceMiningUnit": {
      "parent": "Element",
      "methods": {
        "getState": {
          "description": "Returns the current state of the space mining unit",
          "returns": [
            {
              "type": "integer",
              "name": "state",
              "description": "The status of the space mining unit can be (Stopped = 1, Running = 2, Jammed output full = 3, Jammed no output container = 4)"
            }
          ],
          "isMethodStatic": true
        },
        "getStatus": {
          "deprecated": true,
          "description": "MiningUnit.getStatus() is deprecated, use MiningUnit.getState() instead.",
          "isMethodStatic": true
        },
        "getRemainingTime": {
          "description": "Returns the remaining time of the current batch extraction process.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The remaining time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getActiveOre": {
          "description": "Returns the item ID of the currently selected ore.",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The item ID of the selected ore"
            }
          ],
          "isMethodStatic": true
        },
        "getOrePools": {
          "description": "Returns the list of available ore pools",
          "returns": [
            {
              "type": "table",
              "name": "pool",
              "description": "A list of tables composed with {[int] oreId, [float] available, [float] maximum}"
            }
          ],
          "isMethodStatic": true
        },
        "getBaseRate": {
          "description": "Returns the base production rate of the space mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The production rate in L/h"
            }
          ],
          "isMethodStatic": true
        },
        "getEfficiency": {
          "description": "Returns the efficiency rate of the space mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The efficiency rate between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "getCalibrationRate": {
          "description": "Returns the calibration rate of the space mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The calibration rate of the space mining unit between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "getOptimalRate": {
          "description": "Returns the optimal calibration rate of the space mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The optimal calibration rate of the space mining unit between 0 and 1"
            }
          ],
          "isMethodStatic": true
        },
        "getProductionRate": {
          "description": "Returns the current production rate of the space mining unit.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The production rate in L/h"
            }
          ],
          "isMethodStatic": true
        }
      },
      "events": {
        "onStarted": {
          "description": "Emitted when the space mining unit started a new extraction process.",
          "params": [
            {
              "name": "oreId",
              "type": "number",
              "description": "The item ID of the ore mined during the extraction process"
            }
          ]
        },
        "onCompleted": {
          "description": "Emitted when the space mining unit complete a batch.",
          "params": [
            {
              "name": "oreId",
              "type": "number",
              "description": "The item ID of the ore mined during the extraction process"
            },
            {
              "name": "amount",
              "type": "number",
              "description": "Amount of ore mined"
            }
          ]
        },
        "completed": {},
        "onStatusChanged": {
          "description": "Emitted when the space mining unit status is changed.",
          "params": [
            {
              "name": "status",
              "type": "integer",
              "description": "The status of the space mining unit can be"
            }
          ]
        },
        "statusChanged": {},
        "onStopped": {
          "description": "Emitted when the space mining unit stopped the extraction process."
        }
      }
    },
    "SurfaceEngine": {
      "parent": "FueledEngine",
      "methods": {
        "getDistance": {
          "description": "Returns the distance to the first object detected in the direction of the thrust",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The distance to the first obstacle in meters"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxDistance": {
          "description": "Returns the maximum functional distance from the ground",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The maximum functional distance in meters"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "System": {
      "events": {
        "onActionStart": {
          "description": "Emitted when an action starts",
          "params": [
            {
              "name": "action",
              "type": "string",
              "description": "The action name, represented as a string taken among the set of predefined Lua-available actions (you can check the drop down list to see what is available)"
            }
          ]
        },
        "actionStart": {},
        "onActionStop": {
          "description": "Emitted when an action stops",
          "params": [
            {
              "name": "action",
              "type": "string",
              "description": "The action name, represented as a string taken among the set of predefined Lua-available actions (you can check the drop down list to see what is available)"
            }
          ]
        },
        "actionStop": {},
        "onActionLoop": {
          "description": "Emitted at each update as long as the action is maintained",
          "params": [
            {
              "name": "action",
              "type": "string",
              "description": "The action name, represented as a string taken among the set of predefined Lua-available actions (you can check the drop down list to see what is available)"
            }
          ]
        },
        "actionLoop": {},
        "onUpdate": {
          "description": "Game update event. This is equivalent to a timer set at 0 seconds, as updates will go as fast as the FPS can go"
        },
        "update": {},
        "onFlush": {
          "description": "Physics update. Do not use to put anything else by a call to updateICC on your Control Unit, as many functions are\ndisabled when called from 'onFlush'. This is only to update the physics (engine control, etc), not to setup some gameplay code"
        },
        "flush": {},
        "onInputText": {
          "description": "A new message has been entered in the Lua tab of the chat, acting like a command line interface",
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "The message entered"
            }
          ]
        },
        "inputText": {},
        "onCameraChanged": {
          "description": "Emitted when the player changes the camera mode.",
          "params": [
            {
              "name": "mode",
              "type": "integer",
              "description": "The camera mode, represented by an integer (First Person View = 1, Look Around Construct View = 2, Follow Construct View = 3)"
            }
          ]
        },
        "cameraChanged": {}
      },
      "methods": {
        "getActionKeyName": {
          "description": "Return the currently key bound to the given action. Useful to display tips.",
          "params": [
            {
              "name": "actionName",
              "type": "string",
              "description": "The action name, represented as a string taken among the set of predefined Lua-available actions (you can check the drop down list to see what is available)"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The key associated to the given action name"
            }
          ],
          "isMethodStatic": true
        },
        "showScreen": {
          "description": "Control the display of the Control Unit custom screen, where you can define customized display information in HTML.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "bool",
              "type": "boolean",
              "description": "True to show the screen, false to hide the screen"
            }
          ],
          "isMethodStatic": true
        },
        "setScreen": {
          "description": "Set the content of the Control Unit custom screen with some HTML code.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "content",
              "type": "string",
              "description": "The HTML content you want to display on the screen widget. You can also use SVG here to make drawings."
            }
          ],
          "isMethodStatic": true
        },
        "createWidgetPanel": {
          "description": "Create an empty panel.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "label",
              "type": "string",
              "description": "The title of the panel"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The panel ID, or \"\" on failure"
            }
          ],
          "isMethodStatic": true
        },
        "destroyWidgetPanel": {
          "description": "Destroy the panel.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "panelId",
              "type": "string",
              "description": "The panel ID"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the panel has been successfully destroyed, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "createWidget": {
          "description": "Create an empty widget and add it to a panel.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "panelId",
              "type": "string",
              "description": "The panel ID"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Widget type, determining how it will display data attached to ID"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The widget ID, or \"\" on failure."
            }
          ],
          "isMethodStatic": true
        },
        "destroyWidget": {
          "description": "Destroy the widget.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "widgetId",
              "type": "string",
              "description": "The widget ID"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the widget has been successfully destroyed, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "createData": {
          "description": "Create data.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "dataJson",
              "type": "string",
              "description": "The data fields as JSON"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The data ID, or \"\" on failure."
            }
          ],
          "isMethodStatic": true
        },
        "destroyData": {
          "description": "Destroy the data.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "dataId",
              "type": "string",
              "description": "The data ID"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the data has been successfully destroyed, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "updateData": {
          "description": "Update JSON associated to data.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "dataId",
              "type": "string",
              "description": "The data ID"
            },
            {
              "name": "dataJson",
              "type": "string",
              "description": "The data fields as JSON"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the data has been successfully updated, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "addDataToWidget": {
          "description": "Add data to widget.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "dataId",
              "type": "string",
              "description": "The data ID"
            },
            {
              "name": "widgetId",
              "type": "string",
              "description": "The widget ID"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the data has been successfully added to the widget, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "removeDataFromWidget": {
          "description": "Remove data from widget.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "dataId",
              "type": "string",
              "description": "The data ID"
            },
            {
              "name": "widgetId",
              "type": "string",
              "description": "The widget ID"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the data has been successfully removed from the widget, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getMouseWheel": {
          "description": "Return the current value of the mouse wheel",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current value of the mouse wheel"
            }
          ],
          "isMethodStatic": true
        },
        "getMouseDeltaX": {
          "description": "Return the current value of the mouse delta X",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current value of the mouse delta X"
            }
          ],
          "isMethodStatic": true
        },
        "getMouseDeltaY": {
          "description": "Return the current value of the mouse delta Y",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current value of the mouse delta Y"
            }
          ],
          "isMethodStatic": true
        },
        "getMousePosX": {
          "description": "Return the current value of the mouse pos X",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current value of the mouse pos X"
            }
          ],
          "isMethodStatic": true
        },
        "getMousePosY": {
          "description": "Return the current value of the mouse pos Y",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current value of the mouse pos Y"
            }
          ],
          "isMethodStatic": true
        },
        "getMouseSensitivity": {
          "description": "Return the value of mouse sensitivity game setting",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Sensitivity setting value"
            }
          ],
          "isMethodStatic": true
        },
        "getScreenHeight": {
          "description": "Return the current value of the screen height",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The current value of the screen height"
            }
          ],
          "isMethodStatic": true
        },
        "getScreenWidth": {
          "description": "Return the current value of the screen width",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The current value of the screen width"
            }
          ],
          "isMethodStatic": true
        },
        "getCameraHorizontalFov": {
          "description": "Return the current value of the player's horizontal field of view",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current value of the player's horizontal field of view"
            }
          ],
          "isMethodStatic": true
        },
        "getFov": {
          "deprecated": true,
          "description": "System.getFov() is deprecated, use System.getCameraHorizontalFov().",
          "isMethodStatic": true
        },
        "getCameraVerticalFov": {
          "description": "Return the current value of the player's vertical field of view",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current value of the player's vertical field of view"
            }
          ],
          "isMethodStatic": true
        },
        "getCameraMode": {
          "description": "Returns the active camera mode.",
          "returns": [
            {
              "type": "integer",
              "name": "mode",
              "description": "1: First Person View, 2: Look Around Construct View, 3: Follow Construct View"
            }
          ],
          "isMethodStatic": true
        },
        "isFirstPerson": {
          "description": "Checks if the active camera is in first person view.",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the camera is in first person view, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getCameraPos": {
          "description": "Returns the position of the camera, in construct local coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Camera position in construct local coordinates."
            }
          ],
          "isMethodStatic": true
        },
        "getCameraWorldPos": {
          "description": "Returns the position of the camera, in world coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Camera position in world coordinates."
            }
          ],
          "isMethodStatic": true
        },
        "getCameraWorldForward": {
          "description": "Returns the forward direction vector of the active camera, in world coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Camera forward direction vector in world coordinates."
            }
          ],
          "isMethodStatic": true
        },
        "getCameraWorldRight": {
          "description": "Returns the right direction vector of the active camera, in world coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Camera right direction vector in world coordinates."
            }
          ],
          "isMethodStatic": true
        },
        "getCameraWorldUp": {
          "description": "Returns the up direction vector of the active camera, in world coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Camera up direction vector in world coordinates."
            }
          ],
          "isMethodStatic": true
        },
        "getCameraForward": {
          "description": "Returns the forward direction vector of the active camera, in construct local coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Camera forward direction vector in construct local coordinates."
            }
          ],
          "isMethodStatic": true
        },
        "getCameraRight": {
          "description": "Returns the right direction vector of the active camera, in construct local coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Camera right direction vector in construct local coordinates."
            }
          ],
          "isMethodStatic": true
        },
        "getCameraUp": {
          "description": "Returns the up direction vector of the active camera, in construct local coordinates.",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "Camera up direction vector in construct local coordinates."
            }
          ],
          "isMethodStatic": true
        },
        "getThrottleInputFromMouseWheel": {
          "description": "Return the current value of the mouse wheel (for the throttle speedUp/speedDown action)\nThis value will go through the control scheme, devices and sensitivity",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current input"
            }
          ],
          "isMethodStatic": true
        },
        "getControlDeviceForwardInput": {
          "description": "Return the mouse input for the ship control action (forward/backward)\nThis value will go through the control scheme to know on which input the mouse is mapped and its current sensitivity",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current input"
            }
          ],
          "isMethodStatic": true
        },
        "getControlDeviceYawInput": {
          "description": "Return the mouse input for the ship control action  (yaw right/left)\nThis value will go through the control scheme to know on which input the mouse is mapped and its current sensitivity",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current input"
            }
          ],
          "isMethodStatic": true
        },
        "getControlDeviceLeftRightInput": {
          "description": "Return the mouse input for the ship control action  (right/left)\nThis value will go through the control scheme to know on which input the mouse is mapped and its current sensitivity",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The current value of the mouse delta Y"
            }
          ],
          "isMethodStatic": true
        },
        "lockView": {
          "description": "Lock or unlock the mouse free look.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "state",
              "type": "boolean",
              "description": "True to lock the view, false to unlock"
            }
          ],
          "isMethodStatic": true
        },
        "isViewLocked": {
          "description": "Return the lock state of the mouse free look",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the view is locked, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "freeze": {
          "deprecated": true,
          "description": "System.freeze() is deprecated, use Player.freeze().",
          "isMethodStatic": true
        },
        "isFrozen": {
          "deprecated": true,
          "description": "System.isFrozen() is deprecated, use Player.isFrozen().",
          "isMethodStatic": true
        },
        "getArkTime": {
          "description": "Return the current time since the arrival of the Arkship on September 30th, 2017",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getTime": {
          "deprecated": true,
          "description": "System.getTime() is deprecated, use System.getArkTime().",
          "isMethodStatic": true
        },
        "getUtcTime": {
          "description": "Return the current time since January 1st, 1970.",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getUtcOffset": {
          "description": "Return the time offset between local timezone and UTC",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "Time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getLocale": {
          "description": "Return the locale in which the game is currently running",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The locale, currently one of \"en-US\", \"fr-FR\", or \"de-DE\""
            }
          ],
          "isMethodStatic": true
        },
        "getActionUpdateDeltaTime": {
          "description": "Return delta time of action updates (to use in ActionLoop)",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The delta time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getPlayerName": {
          "description": "Return the name of the given player, if in range of visibility or broadcasted by a transponder",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the player"
            }
          ],
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The name of the player"
            }
          ],
          "isMethodStatic": true
        },
        "getPlayerWorldPos": {
          "description": "Return the world position of the given player, if in range of visibility",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the player"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The coordinates of the player in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getItem": {
          "description": "Return the item table corresponding to the given item ID.",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "An item table with fields: {[int] id, [string] name, [string] displayName, [string] locDisplayName, [string] displayNameWithSize, [string] locDisplayNameWithSize, [string] description, [string] locDescription, [string] type, [number] unitMass, [number] unitVolume, [integer] tier, [string] size, [string] iconPath, [table] schematics, [table] products}"
            }
          ],
          "isMethodStatic": true
        },
        "isItemInClassId": {
          "description": "Checks if the item is an item of the class identified by its item id",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            },
            {
              "name": "classId",
              "type": "integer",
              "description": "The item ID of the item class"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is an item of the given class, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isItemInClass": {
          "description": "Checks if the given item is an item of the class given by its class name",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            },
            {
              "name": "className[string]:",
              "type": "The",
              "description": "name of the item class"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is an item of the given class, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isClassItem": {
          "description": "Checks if the given item is a class item",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is a class item, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isElementItem": {
          "description": "Checks if the given item is an element",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is an element, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isMaterialItem": {
          "description": "Checks if the given item is a material",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is a material, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isRawMaterialItem": {
          "description": "Checks if the given item is a raw material",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is a raw material, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isBlueprintItem": {
          "description": "Checks if the given item is a blueprint",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is a blueprint, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isScrapItem": {
          "description": "Checks if the given item is a scrap item",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is a scrap item, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isPartItem": {
          "description": "Checks if the given item is a part",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is a part, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isAmmoItem": {
          "description": "Checks if the given item is an ammo item",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is an ammo item, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isPackageItem": {
          "description": "Checks if the given item is a package",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is a package, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "isSchematicItem": {
          "description": "Checks if the given item is a schematic",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the item is a schematic, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getRecipes": {
          "description": "Returns a list of recipes producing the given item from its id.",
          "params": [
            {
              "name": "itemId",
              "type": "integer",
              "description": "The ID of the item"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "A list of recipe table with field: {[integer] id, [integer] tier,[number] time, [bool] nanocraftable, [table] producers, [table] products:{{[integer] id, [number] quantity},...}, [table] ingredients:{{[integer] id, [number] quantity},...}}"
            }
          ],
          "isMethodStatic": true
        },
        "getSchematic": {
          "deprecated": true,
          "description": "System.getSchematic(id) is deprecated, use System.getRecipes(itemId).tag.",
          "isMethodStatic": true
        },
        "getOrganization": {
          "description": "Returns the corresping organization to the given organization id, if known, e.g. broadcasted by a transponder",
          "params": [
            {
              "name": "id",
              "type": "integer",
              "description": "The ID of the organization"
            }
          ],
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "A table containing information about the given organization {[string] name, [string] tag}"
            }
          ],
          "isMethodStatic": true
        },
        "getOrganizationName": {
          "deprecated": true,
          "description": "System.getOrganizationName() is deprecated, use System.getOrganization(id).name .",
          "isMethodStatic": true
        },
        "getOrganizationTag": {
          "deprecated": true,
          "description": "System.getOrganizationTag() is deprecated, use System.getOrganization(id).tag .",
          "isMethodStatic": true
        },
        "getWaypointFromPlayerPos": {
          "description": "Return the player's world position as a waypoint string, starting with '::pos' (only in explicit runs)",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The waypoint as a string"
            }
          ],
          "isMethodStatic": true
        },
        "setWaypoint": {
          "description": "Set a waypoint at the destination described by the waypoint string, of the form '::pos{...}' (only in explicit runs)",
          "params": [
            {
              "name": "waypointStr",
              "type": "string",
              "description": "The waypoint as a string"
            },
            {
              "name": "notify",
              "type": "boolean",
              "description": "(Optional) True to display a notification on waypoint change"
            }
          ],
          "isMethodStatic": true
        },
        "clearWaypoint": {
          "description": "Clear the active destination waypoint. (only in explicit runs)'",
          "params": [
            {
              "name": "notify",
              "type": "boolean",
              "description": "(Optional) True to display a notification about the waypoint's clearing"
            }
          ],
          "isMethodStatic": true
        },
        "getInstructionCount": {
          "description": "Returns the current instruction count during this tick",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The current instruction count during this tick"
            }
          ],
          "isMethodStatic": true
        },
        "getInstructionLimit": {
          "description": "Returns the instruction limit before the CPU overload",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The instruction limit per tick"
            }
          ],
          "isMethodStatic": true
        },
        "showHelper": {
          "description": "Set the visibility of the helper top menu.\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "show",
              "type": "boolean",
              "description": "True to show the top helper menu, false to hide the top helper menu"
            }
          ],
          "isMethodStatic": true
        },
        "playSound": {
          "description": "Play a sound file from your audio folder (located in \"My documents/NQ/DualUniverse/audio\"). Only one sound can be played at a time.",
          "params": [
            {
              "name": "filePath",
              "type": "string",
              "description": "Relative path to audio folder (.mp3, .wav)"
            }
          ],
          "isMethodStatic": true
        },
        "isPlayingSound": {
          "description": "Checks if a sound is playing",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if a sound is playing, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "stopSound": {
          "description": "Stop the current playing sound",
          "isMethodStatic": true
        },
        "print": {
          "description": "Print the given string in the Lua chat channel\nNote that this function is disabled if the player is not running the script explicitly (pressing F on the Control Unit, vs. via a plug signal).",
          "params": [
            {
              "name": "msg",
              "type": "string",
              "description": "The message to print"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "Telemeter": {
      "parent": "Element",
      "methods": {
        "getDistance": {
          "deprecated": true,
          "description": "Telemeter.getDistance() is deprecated, use Telemeter.raycast().distance instead.",
          "isMethodStatic": true
        },
        "raycast": {
          "description": "Emits a raycast from the telemeter, returns a raycastHit object",
          "returns": [
            {
              "type": "table",
              "name": "hit",
              "description": "A table with fields : {[bool] hit, [float] distance, [vec3] point}"
            }
          ],
          "isMethodStatic": true
        },
        "getRayOrigin": {
          "description": "Returns telemeter raycast origin in local construct coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The telemeter raycast origin in local construct coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getRayWorldOrigin": {
          "description": "Returns telemeter raycast origin in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The telemeter raycast origin in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getRayAxis": {
          "description": "Returns telemeter raycast axis in local construct coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The telemeter raycast axis in local construct coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getRayWorldAxis": {
          "description": "Returns telemeter raycast axis in world coordinates",
          "returns": [
            {
              "type": "table",
              "name": "value",
              "description": "The telemeter raycast axis in world coordinates"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxDistance": {
          "description": "Returns the max distance from which an obstacle can be detected (default is 100m)",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The max distance to detectable obstacles in meters"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "Transponder": {
      "parent": "Element",
      "methods": {
        "activate": {
          "description": "Activate the transponder",
          "isMethodStatic": true
        },
        "deactivate": {
          "description": "Deactivate the transponder",
          "isMethodStatic": true
        },
        "toggle": {
          "description": "Toggle the state of the transponder",
          "isMethodStatic": true
        },
        "isActive": {
          "description": "Checks if the transponder is active",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the transponder is active, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getState": {
          "deprecated": true,
          "description": "Transponder.getState() is deprecated, use Transponder.isActive().",
          "isMethodStatic": true
        },
        "setTags": {
          "description": "Set the tags list with up to 8 entries",
          "params": [
            {
              "name": "tags",
              "type": "table",
              "description": "List of up to 8 transponder tag strings"
            }
          ],
          "returns": [
            {
              "type": "boolean",
              "name": "success",
              "description": "True if transponder tags were set, false if an error occurred"
            }
          ],
          "isMethodStatic": true
        },
        "getTags": {
          "description": "Returns the tag list",
          "returns": [
            {
              "type": "table",
              "name": "tags",
              "description": "List of up to 8 transponder tag strings"
            }
          ],
          "isMethodStatic": true
        }
      },
      "events": {
        "onToggled": {
          "description": "Emitted when the transponder is started or stopped",
          "params": [
            {
              "name": "active",
              "type": "boolean",
              "description": "True if the element was activated, false otherwise"
            }
          ]
        },
        "toggled": {}
      }
    },
    "VerticalBooster": {
      "parent": "SurfaceEngine"
    },
    "WarpDrive": {
      "parent": "Element",
      "methods": {
        "initiate": {
          "description": "Initiate the warp jump process",
          "isMethodStatic": true
        },
        "getStatus": {
          "description": "Returns the current status of the warp drive",
          "returns": [
            {
              "type": "integer",
              "name": "status",
              "description": "The current status of the warp drive (NoWarpDrive = 1, Broken = 2, Warping = 3, ParentWarping = 4, NotAnchored = 5, WarpCooldown = 6, PvPCooldown = 7, MovingChild = 8, NoContainer = 9, PlanetTooClose = 10, DestinationNotSet = 11, DestinationTooClose = 12, DestinationTooFar = 13, NotEnoughWarpCells = 14, Ready = 15)"
            }
          ],
          "isMethodStatic": true
        },
        "getDistance": {
          "description": "Returns the distance to the current warp destination",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The distance to the current warp destination"
            }
          ],
          "isMethodStatic": true
        },
        "getDestination": {
          "description": "Returns the construct ID of the current warp destination",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The construct id of the warp destination"
            }
          ],
          "isMethodStatic": true
        },
        "getDestinationName": {
          "description": "Returns the name of the current warp destination construct",
          "returns": [
            {
              "type": "string",
              "name": "value",
              "description": "The warp destination name"
            }
          ],
          "isMethodStatic": true
        },
        "getContainerId": {
          "description": "Returns the local id of the container linked to the warp drive",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The local id of the container"
            }
          ],
          "isMethodStatic": true
        },
        "getAvailableWarpCells": {
          "description": "Returns the quantity of warp cells available in the linked container",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The quantity of available warp cells"
            }
          ],
          "isMethodStatic": true
        },
        "getRequiredWarpCells": {
          "description": "Returns the quantity of warp cells required to warp to the warp destination set",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The quantity of required warp cells for the jump set"
            }
          ],
          "isMethodStatic": true
        }
      }
    },
    "Weapon": {
      "parent": "Element",
      "events": {
        "onReload": {
          "description": "Emitted when the weapon start reloading",
          "params": [
            {
              "name": "ammoId",
              "type": "integer",
              "description": "The item id of the ammo"
            }
          ]
        },
        "onReloaded": {
          "description": "Emitted when the weapon has reloaded",
          "params": [
            {
              "name": "ammoId",
              "type": "integer",
              "description": "The item id of the ammo"
            }
          ]
        },
        "onMissed": {
          "description": "Emitted when the weapon has missed its target",
          "params": [
            {
              "name": "targetId",
              "type": "integer",
              "description": "The construct id of the target"
            }
          ]
        },
        "onDestroyed": {
          "description": "Emitted when the weapon target has been destroyed",
          "params": [
            {
              "name": "targetId",
              "type": "integer",
              "description": "The construct id of the target"
            }
          ]
        },
        "onElementDestroyed": {
          "description": "Emitted when an element on the weapon target has been destroyed",
          "params": [
            {
              "name": "targetId",
              "type": "integer",
              "description": "The construct id of the target"
            },
            {
              "name": "itemId",
              "type": "integer",
              "description": "The item id of the destroyed element"
            }
          ]
        },
        "onHit": {
          "description": "Emitted when the weapon has hit",
          "params": [
            {
              "name": "targetId",
              "type": "integer",
              "description": "The construct id of the target"
            },
            {
              "name": "damage",
              "type": "number",
              "description": "The damage amount dealt by the hit"
            }
          ]
        }
      },
      "methods": {
        "getAmmo": {
          "description": "Returns the item id of the currently equipped ammo",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The item id of the ammunition in the weapon"
            }
          ],
          "isMethodStatic": true
        },
        "getAmmoCount": {
          "description": "Returns the current amount of remaining ammunition",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The remaining ammunition count (0 when reloading)"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxAmmo": {
          "description": "Returns the maximum amount of ammunition the weapon can carry",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The maximum amount of ammunition"
            }
          ],
          "isMethodStatic": true
        },
        "isOutOfAmmo": {
          "description": "Checks if the weapon is out of ammo",
          "returns": [
            {
              "type": "boolean",
              "name": "value",
              "description": "True if the weapon is out of ammo, false otherwise"
            }
          ],
          "isMethodStatic": true
        },
        "getOperationalState": {
          "description": "Checks if the weapon is operational",
          "returns": [
            {
              "type": "integer",
              "name": "state",
              "description": "1 if the weapon is operational, otherwise 0 = broken, -1 = incompatible size"
            }
          ],
          "isMethodStatic": true
        },
        "isOperational": {
          "deprecated": true,
          "description": "Weapon.isOperational() is deprecated, use Weapon.getOperationalState() instead.",
          "isMethodStatic": true
        },
        "getStatus": {
          "description": "Returns the current weapon status",
          "returns": [
            {
              "type": "integer",
              "name": "status",
              "description": "The current status of the weapon (Idle = 1, Firing = 2, Stopping = 3, Reloading = 4, Unloading = 5, FiringBlocked = 6)"
            }
          ],
          "isMethodStatic": true
        },
        "getContainerId": {
          "description": "Returns the local id of the container linked to the weapon",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The local id of the container"
            }
          ],
          "isMethodStatic": true
        },
        "getHitProbability": {
          "description": "Returns the current hit probability of the weapon for the current target",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The hit probability of the weapon"
            }
          ],
          "isMethodStatic": true
        },
        "getBaseDamage": {
          "description": "Returns the base weapon damage",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The base weapon damage in hitpoints"
            }
          ],
          "isMethodStatic": true
        },
        "getOptimalAimingCone": {
          "description": "Returns the optimal aim cone",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The optimal aim cone in degrees"
            }
          ],
          "isMethodStatic": true
        },
        "getOptimalDistance": {
          "description": "Returns the optimal distance to target",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The optimal distance in meters"
            }
          ],
          "isMethodStatic": true
        },
        "getMaxDistance": {
          "description": "Returns the maximum distance to target",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The optimal distance in meters"
            }
          ],
          "isMethodStatic": true
        },
        "getOptimalTracking": {
          "description": "Returns the optimal tracking rate",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The optimal tracking rate in degrees per second"
            }
          ],
          "isMethodStatic": true
        },
        "getMagazineVolume": {
          "description": "Returns the magazine volume",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The magazine volume in liters"
            }
          ],
          "isMethodStatic": true
        },
        "getCycleTime": {
          "description": "Returns the weapon cycle time",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The weapon cycle time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getReloadTime": {
          "description": "Returns the weapon reload time",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The weapon reload time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getUnloadTime": {
          "description": "Returns the weapon unload time",
          "returns": [
            {
              "type": "number",
              "name": "value",
              "description": "The weapon unload time in seconds"
            }
          ],
          "isMethodStatic": true
        },
        "getTargetId": {
          "description": "Returns the id of the current target construct of the weapon",
          "returns": [
            {
              "type": "integer",
              "name": "value",
              "description": "The target construct id"
            }
          ],
          "isMethodStatic": true
        }
      }
    }
  },
  "globals": {
    "library": {
      "type": "Library"
    },
    "system": {
      "type": "System"
    },
    "unit": {
      "type": "ControlUnit"
    },
    "player": {
      "type": "Player"
    },
    "construct": {
      "type": "Construct"
    },
    "DULibrary": {
      "type": "Library"
    },
    "DUSystem": {
      "type": "System"
    },
    "DUPlayer": {
      "type": "Player"
    },
    "DUConstruct": {
      "type": "Construct"
    }
  }
}